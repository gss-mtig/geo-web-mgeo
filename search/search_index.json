{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programaci\u00f3 de geoaplicacions web Materiales para el curso sobre Programaci\u00f3 de geoaplicacions web del M\u00e0ster en Geoinformaci\u00f3 de la UAB Temario: https://gss-mtig.github.io/geo-web-mgeo/ Autores Wladimir Szczerban (alias Bolo) @bolosig , geostarter (ICGC) Ignacio Ferrero (Departamento de Geograf\u00eda UAB) Condiciones de reutilizaci\u00f3n de estos apuntes Estos materiales est\u00e1n publicados bajo licencia CreativeCommons (by-sa) 4.0 internacional Usted es libre de: * Compartir \u2014 copiar y redistribuir el material en cualquier medio o formato * Adaptar \u2014 remezclar, transformar y crear a partir del material para cualquier finalidad, incluso comercial. Bajo las condiciones siguientes: Reconocimiento \u2014 Debe reconocer adecuadamente la autor\u00eda, proporcionar un enlace a la licencia e indicar si se han realizado cambios. Puede hacerlo de cualquier manera razonable, pero no de una manera que sugiera que tiene el apoyo del licenciador o lo recibe por el uso que hace. CompartirIgual \u2014 Si remezcla, transforma o crea a partir del material, deber\u00e1 difundir sus contribuciones bajo la misma licencia que el original. No hay restricciones adicionales \u2014 No puede aplicar t\u00e9rminos legales o medidas tecnol\u00f3gicas que legalmente restrinjan realizar aquello que la licencia permite.","title":"Home"},{"location":"#programacio-de-geoaplicacions-web","text":"Materiales para el curso sobre Programaci\u00f3 de geoaplicacions web del M\u00e0ster en Geoinformaci\u00f3 de la UAB Temario:","title":"Programaci\u00f3 de geoaplicacions web"},{"location":"#httpsgss-mtiggithubiogeo-web-mgeo","text":"","title":"https://gss-mtig.github.io/geo-web-mgeo/"},{"location":"#autores","text":"Wladimir Szczerban (alias Bolo) @bolosig , geostarter (ICGC) Ignacio Ferrero (Departamento de Geograf\u00eda UAB) Condiciones de reutilizaci\u00f3n de estos apuntes Estos materiales est\u00e1n publicados bajo licencia CreativeCommons (by-sa) 4.0 internacional Usted es libre de: * Compartir \u2014 copiar y redistribuir el material en cualquier medio o formato * Adaptar \u2014 remezclar, transformar y crear a partir del material para cualquier finalidad, incluso comercial. Bajo las condiciones siguientes: Reconocimiento \u2014 Debe reconocer adecuadamente la autor\u00eda, proporcionar un enlace a la licencia e indicar si se han realizado cambios. Puede hacerlo de cualquier manera razonable, pero no de una manera que sugiera que tiene el apoyo del licenciador o lo recibe por el uso que hace. CompartirIgual \u2014 Si remezcla, transforma o crea a partir del material, deber\u00e1 difundir sus contribuciones bajo la misma licencia que el original. No hay restricciones adicionales \u2014 No puede aplicar t\u00e9rminos legales o medidas tecnol\u00f3gicas que legalmente restrinjan realizar aquello que la licencia permite.","title":"Autores"},{"location":"arcgis/","text":"ArcGIS API for Javascript La ArcGIS API for JavaScript permite crear aplicaciones web interactivas y tiene visualizaciones tanto en 2D como en 3D. Forma parte de todo el ecosistema ArcGIS de ESRI. Al igual que la API de google est\u00e1 soportada por una gran empresa como lo \u00e9s ESRI. Est\u00e1 integrado con los recursos de la platadforma de ArcGIS Online. Para acceder a los servicios de ArcGIS como por ejemplo el mapa base, geocodificador, routing, etc es necesario tener una API KEY y tienen un coste (aunque tienen uso gratis pero limitado). La referencia de la API la podemos ver en https://developers.arcgis.com/javascript/latest/ Generar la API KEY Ingresar en el dashbord https://developers.arcgis.com/dashboard/ Seleccionar la opci\u00f3n de ArcGIS API for JavaScript Seleccionar la opci\u00f3n de \"no quiero especificar\" Hacer click en el bot\u00f3n de nueva API KEY Mi primer mapa Crear un archivo llamado arcgis.html y copiar lo siguiente: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < link rel = \"stylesheet\" href = \"https://js.arcgis.com/4.18/esri/themes/light/main.css\" > < style > html , body , # viewDiv { padding : 0 ; margin : 0 ; height : 100 % ; width : 100 % ; } </ style > < script src = \"https://js.arcgis.com/4.18/\" ></ script > < script > require ([ \"esri/config\" , \"esri/Map\" , \"esri/views/MapView\" ], function ( esriConfig , Map , MapView ) { esriConfig . apiKey = \"YOUR_API_KEY\" ; const map = new Map ({ basemap : \"arcgis-topographic\" // Basemap layer service }); const view = new MapView ({ map : map , center : [ 2 , 41.5 ], // Longitude, latitude zoom : 7 , // Zoom level container : \"viewDiv\" // Div element }); }); </ script > </ head > < body > < div id = \"viewDiv\" ></ div > </ body > </ html > Una diferencia con las otras librerias de mapas que veremos es el concepto de cargar m\u00f3dulos. Podemos ver en nuestro c\u00f3digo que se llama a la funci\u00f3n require y que se le pasa una matriz como par\u00e1metro. Esta matriz contiene los m\u00f3dulos que queremos cargar. Estilos disponibles La API dispone de varios estilos (themes) para la interfaz de la aplicaci\u00f3n Podemos ver los estilo en https://developers.arcgis.com/javascript/latest/styling/#themes Algunos Widgets disponibles https://developers.arcgis.com/javascript/latest/api-reference/ BaseMap Toggle: permite al usuario final cambiar entre mapas base. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle.html LayerList: proporciona una forma de mostrar una lista de capas y activar / desactivar su visibilidad. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html Legend: muestra etiquetas y s\u00edmbolos para capas en un mapa. Las etiquetas y sus s\u00edmbolos correspondientes dependen de los valores establecidos en la capa. La leyenda solo mostrar\u00e1 las capas y subcapas que son visibles en la vista. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Locate: anima la vista a la ubicaci\u00f3n actual del usuario. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Locate.html Measurement: agrupa y administra m\u00faltiples herramientas de medici\u00f3n y le permite cambiar f\u00e1cilmente entre ellas. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html ScaleBar: muestra una barra de escala en el mapa o en un nodo HTML especificado. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleBar.html Print: conecta su aplicaci\u00f3n con un servicio de impresi\u00f3n para permitir la impresi\u00f3n del mapa. Aprovecha la funcionalidad de impresi\u00f3n cartogr\u00e1fica completa de alta calidad del lado del servidor mediante el servicio ExportWebMap de ArcGIS, que se puede configurar con plantillas de dise\u00f1o personalizadas. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html Editor: proporciona una experiencia de edici\u00f3n lista para usar para ayudar a optimizar la experiencia de edici\u00f3n dentro de una aplicaci\u00f3n web. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html Tipos de capas Raster MapImageLayer: permite mostrar y analizar datos de subcapas definidas en un servicio de mapas, exportando im\u00e1genes en lugar de elementos. Las im\u00e1genes del servicio de mapas se generan din\u00e1micamente en el servidor en funci\u00f3n de una solicitud, que incluye un LOD (nivel de detalle), un cuadro delimitador, dpi, referencia espacial y otras opciones. Servicio que viene de ArcGIS Server. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html ImageryTileLayer: presenta datos r\u00e1ster de un servicio de im\u00e1genes en teselas. Servicio que viene de ArcGIS Server. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryTileLayer.html WebTileLayer: proporciona una forma sencilla de agregar mapas de teselas que no son de ArcGIS Server como una capa a un mapa. Esto corresponde a los servicios XYZ. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WebTileLayer.html WMSLayer: se utiliza para crear capas basadas en OGC Web Map Services (WMS). WMSLayer inicialmente ejecuta una solicitud WMS GetCapabilities, que puede requerir CORS o una p\u00e1gina de proxy. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WMSLayer.html WMTSLayer: se utiliza para crear capas basadas en OGC Web Map Services (WMTS). Al igual que el WMSLayer el WMTSLayer inicialmente ejecuta una solicitud WMTS GetCapabilities, que puede requerir CORS o una p\u00e1gina de proxy. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WMTSLayer.html OpenStreetMapLayer: permite usar mapas base de OpenStreetMap. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-OpenStreetMapLayer.html Vector FeatureLayer: se puede crear a partir de un servicio de mapas o un servicio de entidades; Elementos del portal de ArcGIS Online o ArcGIS Enterprise; o de una variedad de funciones del lado del cliente. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html CSVLayer: es una capa de puntos basada en un archivo CSV (.csv, .txt). CSV es un formato de archivo de texto sin formato que se utiliza para representar datos tabulares, incluidas caracter\u00edsticas de puntos geogr\u00e1ficos (latitud, longitud). Normalmente, la coordenada de latitud es el valor Y y la coordenada de longitud es el valor X. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html GeoRSSLayer: se usa para crear una capa basada en GeoRSS. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoRSSLayer.html KMLLayer: se utiliza para crear una capa basada en un archivo KML (.kml, .kmz). https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-KMLLayer.html GeoJSONLayer: se utiliza para crear una capa basada en GeoJSON. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoJSONLayer.html VectorTileLayer: accede a teselas de datos almacenados en cach\u00e9 y los presenta en formato vectorial. La forma en que se muestra VectorTileLayer est\u00e1 definida por la Especificaci\u00f3n de estilo de Mapbox. La informaci\u00f3n de estilo de VectorTileLayer se almacena por separado de sus mosaicos. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html Ejemplos Pod\u00e9is ver m\u00e1s ejemplos de c\u00f3digo en https://developers.arcgis.com/javascript/latest/sample-code/ Ejercicio pt Preparar un mapa con la capa Streets centrada en Espa\u00f1a. Referencia de las capas base: https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#basemap Sobre el ejercicio anterior a\u00f1adir el widget toggleMap para cambiar entre la capa streets y la capa satellite. A\u00f1adir servicio WMS del ICGC de la ortofoto de 25c. Referencias https://developers.arcgis.com/javascript/latest/","title":"ArcGIS API for Javascript"},{"location":"arcgis/#arcgis-api-for-javascript","text":"La ArcGIS API for JavaScript permite crear aplicaciones web interactivas y tiene visualizaciones tanto en 2D como en 3D. Forma parte de todo el ecosistema ArcGIS de ESRI. Al igual que la API de google est\u00e1 soportada por una gran empresa como lo \u00e9s ESRI. Est\u00e1 integrado con los recursos de la platadforma de ArcGIS Online. Para acceder a los servicios de ArcGIS como por ejemplo el mapa base, geocodificador, routing, etc es necesario tener una API KEY y tienen un coste (aunque tienen uso gratis pero limitado). La referencia de la API la podemos ver en https://developers.arcgis.com/javascript/latest/","title":"ArcGIS API for Javascript"},{"location":"arcgis/#generar-la-api-key","text":"Ingresar en el dashbord https://developers.arcgis.com/dashboard/ Seleccionar la opci\u00f3n de ArcGIS API for JavaScript Seleccionar la opci\u00f3n de \"no quiero especificar\" Hacer click en el bot\u00f3n de nueva API KEY","title":"Generar la API KEY"},{"location":"arcgis/#mi-primer-mapa","text":"Crear un archivo llamado arcgis.html y copiar lo siguiente: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < link rel = \"stylesheet\" href = \"https://js.arcgis.com/4.18/esri/themes/light/main.css\" > < style > html , body , # viewDiv { padding : 0 ; margin : 0 ; height : 100 % ; width : 100 % ; } </ style > < script src = \"https://js.arcgis.com/4.18/\" ></ script > < script > require ([ \"esri/config\" , \"esri/Map\" , \"esri/views/MapView\" ], function ( esriConfig , Map , MapView ) { esriConfig . apiKey = \"YOUR_API_KEY\" ; const map = new Map ({ basemap : \"arcgis-topographic\" // Basemap layer service }); const view = new MapView ({ map : map , center : [ 2 , 41.5 ], // Longitude, latitude zoom : 7 , // Zoom level container : \"viewDiv\" // Div element }); }); </ script > </ head > < body > < div id = \"viewDiv\" ></ div > </ body > </ html > Una diferencia con las otras librerias de mapas que veremos es el concepto de cargar m\u00f3dulos. Podemos ver en nuestro c\u00f3digo que se llama a la funci\u00f3n require y que se le pasa una matriz como par\u00e1metro. Esta matriz contiene los m\u00f3dulos que queremos cargar.","title":"Mi primer mapa"},{"location":"arcgis/#estilos-disponibles","text":"La API dispone de varios estilos (themes) para la interfaz de la aplicaci\u00f3n Podemos ver los estilo en https://developers.arcgis.com/javascript/latest/styling/#themes","title":"Estilos disponibles"},{"location":"arcgis/#algunos-widgets-disponibles","text":"https://developers.arcgis.com/javascript/latest/api-reference/ BaseMap Toggle: permite al usuario final cambiar entre mapas base. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle.html LayerList: proporciona una forma de mostrar una lista de capas y activar / desactivar su visibilidad. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html Legend: muestra etiquetas y s\u00edmbolos para capas en un mapa. Las etiquetas y sus s\u00edmbolos correspondientes dependen de los valores establecidos en la capa. La leyenda solo mostrar\u00e1 las capas y subcapas que son visibles en la vista. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html Locate: anima la vista a la ubicaci\u00f3n actual del usuario. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Locate.html Measurement: agrupa y administra m\u00faltiples herramientas de medici\u00f3n y le permite cambiar f\u00e1cilmente entre ellas. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html ScaleBar: muestra una barra de escala en el mapa o en un nodo HTML especificado. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleBar.html Print: conecta su aplicaci\u00f3n con un servicio de impresi\u00f3n para permitir la impresi\u00f3n del mapa. Aprovecha la funcionalidad de impresi\u00f3n cartogr\u00e1fica completa de alta calidad del lado del servidor mediante el servicio ExportWebMap de ArcGIS, que se puede configurar con plantillas de dise\u00f1o personalizadas. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html Editor: proporciona una experiencia de edici\u00f3n lista para usar para ayudar a optimizar la experiencia de edici\u00f3n dentro de una aplicaci\u00f3n web. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html","title":"Algunos Widgets disponibles"},{"location":"arcgis/#tipos-de-capas","text":"","title":"Tipos de capas"},{"location":"arcgis/#raster","text":"MapImageLayer: permite mostrar y analizar datos de subcapas definidas en un servicio de mapas, exportando im\u00e1genes en lugar de elementos. Las im\u00e1genes del servicio de mapas se generan din\u00e1micamente en el servidor en funci\u00f3n de una solicitud, que incluye un LOD (nivel de detalle), un cuadro delimitador, dpi, referencia espacial y otras opciones. Servicio que viene de ArcGIS Server. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html ImageryTileLayer: presenta datos r\u00e1ster de un servicio de im\u00e1genes en teselas. Servicio que viene de ArcGIS Server. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryTileLayer.html WebTileLayer: proporciona una forma sencilla de agregar mapas de teselas que no son de ArcGIS Server como una capa a un mapa. Esto corresponde a los servicios XYZ. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WebTileLayer.html WMSLayer: se utiliza para crear capas basadas en OGC Web Map Services (WMS). WMSLayer inicialmente ejecuta una solicitud WMS GetCapabilities, que puede requerir CORS o una p\u00e1gina de proxy. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WMSLayer.html WMTSLayer: se utiliza para crear capas basadas en OGC Web Map Services (WMTS). Al igual que el WMSLayer el WMTSLayer inicialmente ejecuta una solicitud WMTS GetCapabilities, que puede requerir CORS o una p\u00e1gina de proxy. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WMTSLayer.html OpenStreetMapLayer: permite usar mapas base de OpenStreetMap. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-OpenStreetMapLayer.html","title":"Raster"},{"location":"arcgis/#vector","text":"FeatureLayer: se puede crear a partir de un servicio de mapas o un servicio de entidades; Elementos del portal de ArcGIS Online o ArcGIS Enterprise; o de una variedad de funciones del lado del cliente. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html CSVLayer: es una capa de puntos basada en un archivo CSV (.csv, .txt). CSV es un formato de archivo de texto sin formato que se utiliza para representar datos tabulares, incluidas caracter\u00edsticas de puntos geogr\u00e1ficos (latitud, longitud). Normalmente, la coordenada de latitud es el valor Y y la coordenada de longitud es el valor X. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html GeoRSSLayer: se usa para crear una capa basada en GeoRSS. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoRSSLayer.html KMLLayer: se utiliza para crear una capa basada en un archivo KML (.kml, .kmz). https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-KMLLayer.html GeoJSONLayer: se utiliza para crear una capa basada en GeoJSON. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoJSONLayer.html VectorTileLayer: accede a teselas de datos almacenados en cach\u00e9 y los presenta en formato vectorial. La forma en que se muestra VectorTileLayer est\u00e1 definida por la Especificaci\u00f3n de estilo de Mapbox. La informaci\u00f3n de estilo de VectorTileLayer se almacena por separado de sus mosaicos. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html","title":"Vector"},{"location":"arcgis/#ejemplos","text":"Pod\u00e9is ver m\u00e1s ejemplos de c\u00f3digo en https://developers.arcgis.com/javascript/latest/sample-code/ Ejercicio pt Preparar un mapa con la capa Streets centrada en Espa\u00f1a. Referencia de las capas base: https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#basemap Sobre el ejercicio anterior a\u00f1adir el widget toggleMap para cambiar entre la capa streets y la capa satellite. A\u00f1adir servicio WMS del ICGC de la ortofoto de 25c.","title":"Ejemplos"},{"location":"arcgis/#referencias","text":"https://developers.arcgis.com/javascript/latest/","title":"Referencias"},{"location":"google/","text":"Librer\u00eda Google Maps JavaScript API V3 La API de Google Maps forma parte de la Google Maps Platform lo que f\u00e1cilita la integraci\u00f3n con todos los productos disponibles de esta plataforma. Es una API que est\u00e1 bien documentada y cuenta con el poder de Google para su desarrollo y mantenimiento. Tiene una muy buena integraci\u00f3n con diferentes servicios de Google como lo son el routing, places (para buscar lugares), SDK tanto para iOS como para Android, etc. Todo esto tiene un coste y m\u00e1s ahora que desde el 2018 cambiaron su pol\u00edtica de precios y han aumentado mucho los precios. La referencia de la API la podemos ver en https://developers.google.com/maps/documentation/javascript/reference/?hl=es Warning Para obtener una API KEY hay que tener una cuenta de google y introducir un n\u00fameor de tarjeta de cr\u00e9dito (aunque no cobren nada durante el per\u00edodo de prueba). Dado que no vamos a introducir ning\u00fan n\u00famero de tarjeta de cr\u00e9dito los ejemplos los veremos directamente de los ejemplos de la documentaci\u00f3n de google. Si tenemos uan API KEY podemos cargar la libreria en nuestro html de la siguiente forma: < html > < head > < script type = \"text/javascript\" src = \"http://maps.googleapis.com/maps/api/js?key=[YOUR_API_KEY]\" ></ script > ..... Los ejemplos de la API los podemos ver en https://developers.google.com/maps/documentation/javascript/examples?hl=es Mi primer mapa Abriremos el ejemplo de Simple map https://developers.google.com/maps/documentation/javascript/examples/map-simple?hl=es y cambiaremos el Javascript por el siguiente: let map ; function initMap () { const mapOptions = { center : new google . maps . LatLng ( 42 , 2 ), zoom : 9 , mapTypeId : google . maps . MapTypeId . ROADMAP }; map = new google . maps . Map ( document . getElementById ( \"map\" ), mapOptions ); } Center: Posici\u00f3n en coordenadas geogr\u00e1ficas Zoom: Nivel de zoom. El nivel 0 corresponde a nivel mundial. Alcanza hasta 18 niveles de zoom Tipos de mapas: ROADMAP, que muestra los mosaicos normales en 2D predeterminados de Google Maps. SATELLITE muestra im\u00e1genes de sat\u00e9lite. HYBRID muestra una mezcla de mosaicos fotogr\u00e1ficos y una capa de mosaicos para los elementos del mapa m\u00e1s destacados (carreteras, nombres de ciudades, etc.). TERRAIN muestra mosaicos de relieve f\u00edsico para indicar las elevaciones del terreno y las fuentes de agua (monta\u00f1as, r\u00edos, etc.). Controles de mapa integrados El API de Google Maps dispone de varios controles integrados que puedes emplear en tus mapas: El control de zoom muestra un control deslizante (para mapas grandes) o peque\u00f1os botones \"+/-\" (para mapas peque\u00f1os) que permiten controlar el nivel de zoom del mapa. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada en dispositivos no t\u00e1ctiles o en la esquina inferior izquierda del mapa en los dispositivos t\u00e1ctiles. El control de desplazamiento muestra botones para desplazarse por el mapa. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada en dispositivos no t\u00e1ctiles. El control de desplazamiento tambi\u00e9n te permite girar im\u00e1genes de 45\u00ba, si est\u00e1n disponibles. El control de escala muestra un elemento de escala del mapa. Este control est\u00e1 inhabilitado de forma predeterminada. El control MapType permite al usuario alternar entre los diferentes tipos de mapas, como ROADMAP (mapa de carreteras) y SATELLITE (sat\u00e9lite). Este control aparece en la esquina superior derecha del mapa de forma predeterminada. El control de Street View incluye un icono de hombrecito naranja que se puede arrastrar hasta el mapa para habilitar la funci\u00f3n de Street View. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada. El control de giro incluye un icono circular peque\u00f1o que te permite girar mapas que contienen im\u00e1genes oblicuas. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada (para obtener m\u00e1s informaci\u00f3n, consulta la documentaci\u00f3n sobre im\u00e1genes de 45\u00ba). El control de mapa general muestra un mapa general en miniatura que refleja la ventana gr\u00e1fica del mapa actual dentro de una zona m\u00e1s amplia. Este control aparece en la esquina inferior derecha del mapa y se muestra contra\u00eddo de forma predeterminada. No puedes acceder ni modificar estos controles del mapa directamente, pero puedes modificar los campos MapOptions del mapa que afectan a la visibilidad y a la presentaci\u00f3n de los controles { panControl : booleano , zoomControl : booleano , mapTypeControl : booleano , scaleControl : booleano , streetViewControl : booleano , overviewMapControl : booleano , rotateControl : booleano } Opciones de los controles Control de zoom El control de zoom puede mostrarse en una de las siguientes opciones style: google.maps.ZoomControlStyle.SMALL muestra un control de zoom mini que solo dispone de los botones + y -. Este estilo es adecuado para mapas peque\u00f1os. En los dispositivos t\u00e1ctiles, este control se aparece como botones + y - que responden a los eventos de toque. google.maps.ZoomControlStyle.LARGE muestra el control deslizante de zoom est\u00e1ndar. En los dispositivos t\u00e1ctiles, este control se aparece como botones + y - que responden a los eventos de toque. google.maps.ZoomControlStyle.DEFAULT escoge un control de zoom apropiado en funci\u00f3n del tama\u00f1o del mapa y del dispositivo en el que se est\u00e9 utilizando. zoomControlOptions : { style : google . maps . ZoomControlStyle . SMALL } Control MapType El control MapType puede mostrarse en una de las siguientes opciones style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR muestra el conjunto de controles como botones situados en una barra horizontal como la que se muestra en Google Maps. google.maps.MapTypeControlStyle.DROPDOWN_MENU muestra un control de un solo bot\u00f3n que permite seleccionar el tipo de mapa a trav\u00e9s de un men\u00fa desplegable. google.maps.MapTypeControlStyle.DEFAULT muestra el control \"predeterminado\", que depende del tama\u00f1o de la pantalla y puede cambiar en futuras versiones del API. mapTypeControlOptions : { style : google . maps . MapTypeControlStyle . DROPDOWN_MENU } C\u00f3mo colocar los controles Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/control-positioning?hl=es Superposiciones Google Maps API incorpora varios tipos de superposiciones Marcadores Los puntos en el mapa se muestran mediante marcadores. En algunas ocasiones, los marcadores pueden mostrar im\u00e1genes de iconos personalizados, que se denominan normalmente \"iconos\". Los marcadores e iconos son objetos de tipo Marker. const myLatLng = { lat : 42 , lng : 2 }; const marker = new google . maps . Marker ({ position : myLatlng , map : map , title : \"Hello World!\" }); Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/marker-simple?hl=es Marcadores personalizados new google . maps . Marker ({ position : map . getCenter (), icon : 'http://betaserver.icgc.cat/mapicons/aed-2.png' , map : map , }); Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/marker-symbol-custom?hl=es Pod\u00e9is encontrar m\u00e1s \u00edconos de ejemplo en http://betaserver.icgc.cat/mapicons/ Otro ejemplo con un marker personalizado y un punto de anclaje para que el icono est\u00e9 centrado en la posici\u00f3n del punto del marcador. new google . maps . Marker ({ position : map . getCenter (), icon : { url : 'https://betaserver2.icgc.cat/maki/pin-l-f+ceff00@2x.png' , anchor : new google . maps . Point ( 0 , 90 ) }, map : map , }); L\u00edneas Las l\u00edneas sobre el mapa se muestran mediante polil\u00edneas, que representan una serie ordenada de ubicaciones. Las l\u00edneas son objetos de tipo Polyline. Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/polyline-simple?hl=es Pol\u00edgonos Las \u00e1reas del mapa con forma irregular se muestran mediante pol\u00edgonos, que son similares a las polil\u00edneas. Al igual que las polil\u00edneas, los pol\u00edgonos representan una serie ordenada de ubicaciones; la diferencia estriba en que los pol\u00edgonos definen la regi\u00f3n que engloban. Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/polygon-hole?hl=es Pod\u00e9is ver la documentaci\u00f3n tanto de l\u00edneas como de pol\u00edgonos en https://developers.google.com/maps/documentation/javascript/reference/polygon?hl=es Ventana de informaci\u00f3n La ventana de informaci\u00f3n es tambi\u00e9n un tipo de superposici\u00f3n especial para la visualizaci\u00f3n de contenido (normalmente texto o im\u00e1genes) en un globo emergente que se muestra sobre el mapa en una ubicaci\u00f3n determinada. Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/infowindow-simple?hl=es Superposiciones personalizadas Si quieres, tambi\u00e9n puedes implementar superposiciones personalizadas . Estas superposiciones personalizadas implementan la interfaz OverlayView. Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/overlay-simple?hl=es GeoJSON Podemos agregar un geojson desde una URL que lo contenga o desde una variable que contenga el GeoJSON Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/layer-data-style?hl=es const gasolineras = { \"type\" : \"FeatureCollection\" , \"crs\" : { \"type\" : \"name\" , \"properties\" : { \"name\" : \"urn:ogc:def:crs:OGC:1.3:CRS84\" } }, \"features\" : [ { \"type\" : \"Feature\" , \"properties\" : { \"lon\" : - 16.484670 , \"lat\" : 28.428720 , \"Nombre\" : \"REPSOL Horario Especial 0\" }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ - 16.48467 , 28.42872 ] } }, { \"type\" : \"Feature\" , \"properties\" : { \"lon\" : - 16.460470 , \"lat\" : 28.449530 , \"Nombre\" : \"DISA EL BOHIO L-D: 24H 0\" }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ - 16.46047 , 28.44953 ] } } ] }; map . data . addGeoJson ( gasolineras ); KML Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/layer-kml?hl=es Street View Son vistas panor\u00e1micas de 360 grados de las principales rutas del mundo. Se puede utilizar directamente como control en el mapa: MapOptions: streetViewControl: true o false. Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/streetview-simple?hl=es const uab = { lat : 41.503 , lng : 2.109 }; const map = new google . maps . Map ( document . getElementById ( \"map\" ), { center : fenway , zoom : 14 , }); const panorama = new google . maps . StreetViewPanorama ( document . getElementById ( \"pano\" ), { position : uab , pov : { heading : 220 , pitch : 10 }, } ); map . setStreetView ( panorama ); Routing Google dispone de un servicio de c\u00e1lculo de rutas denominado DirectionsService. Tambi\u00e9n dispone de un servicio de visualizaci\u00f3n de rutas denominado DirectionsRenderer. La petici\u00f3n de una ruta requiere de los siguientes par\u00e1metros. { origin : LatLng | String | google . maps . Place , destination : LatLng | String | google . maps . Place , travelMode : TravelMode , transitOptions : TransitOptions , drivingOptions : DrivingOptions , unitSystem : UnitSystem , waypoints [] : DirectionsWaypoint , optimizeWaypoints : Boolean , provideRouteAlternatives : Boolean , avoidHighways : Boolean , avoidTolls : Boolean , region : String } origin: Origen de la ruta en (LatLng | String | google.maps.Place) destination: Destino de la ruta en (LatLng | String | google.maps.Place) travelMode: Modo de viaje DRIVING: Opci\u00f3n por defecto (Coche) TRANSIT: Transporte p\u00fablico BICYCLING: Bicicleta WALKING: Caminando transitOptions: { arrivalTime: Fecha, departureTime: Fecha, modes[]: (BUS,RAIL,SUBWAY,TRAIN,TRAM) routingPreference: (FEWER_TRANSFERS, LESS_WALKING) } drivingOptions:{ departureTime: Fecha, trafficModel: (BEST_GUESS, OPTIMISTIC, PESSIMISTIC) }, unitSystem: Unidadaes, waypoints[]: Puntos intermedios, optimizeWaypoints: Optimizar puntos intermedios (booleano), provideRouteAlternatives: Mostrar rutes alternatives (booleano), avoidHighways: Evitar autopistes (booleano), avoidTolls: Evitar peajes (booleano), region: Regi\u00f3n donde se calcula la ruta Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/directions-simple?hl=es Ejemplos Pod\u00e9is ver m\u00e1s ejemplos de c\u00f3digo en https://developers.google.com/maps/documentation/javascript/examples/ Ejercicio pt Crear un mapa con la API de google maps. Iniciar el mapa centrado en Catalunya El mapa debe tener el fondo Hibrido activado por defecto Agregar un formulario para crear una ruta. 3.1 Las ciudades de origen deben ser: Barcelona, Terrassa, Sabadell, Cerdanyola y Manresa. 3.2 Los destino deben ser: Facultad de Letras de la UAB y el Parque del Tibidabo 3.3 Los medios de transporte debes ser: Conduciendo, Caminando, Bicicleta, Transporte p\u00fablico. 3.4 Bot\u00f3n para calcular la ruta. Mostrar la distancia de la ruta (en Km) y el tiempo de recorrido (en la unidad m\u00e1s adecuada, minutos u horas) Ejemplo ejercicio Referencias https://developers.google.com/maps/documentation/javascript/reference/?hl=es","title":"Google Maps JavaScript API"},{"location":"google/#libreria-google-maps-javascript-api-v3","text":"La API de Google Maps forma parte de la Google Maps Platform lo que f\u00e1cilita la integraci\u00f3n con todos los productos disponibles de esta plataforma. Es una API que est\u00e1 bien documentada y cuenta con el poder de Google para su desarrollo y mantenimiento. Tiene una muy buena integraci\u00f3n con diferentes servicios de Google como lo son el routing, places (para buscar lugares), SDK tanto para iOS como para Android, etc. Todo esto tiene un coste y m\u00e1s ahora que desde el 2018 cambiaron su pol\u00edtica de precios y han aumentado mucho los precios. La referencia de la API la podemos ver en https://developers.google.com/maps/documentation/javascript/reference/?hl=es Warning Para obtener una API KEY hay que tener una cuenta de google y introducir un n\u00fameor de tarjeta de cr\u00e9dito (aunque no cobren nada durante el per\u00edodo de prueba). Dado que no vamos a introducir ning\u00fan n\u00famero de tarjeta de cr\u00e9dito los ejemplos los veremos directamente de los ejemplos de la documentaci\u00f3n de google. Si tenemos uan API KEY podemos cargar la libreria en nuestro html de la siguiente forma: < html > < head > < script type = \"text/javascript\" src = \"http://maps.googleapis.com/maps/api/js?key=[YOUR_API_KEY]\" ></ script > ..... Los ejemplos de la API los podemos ver en https://developers.google.com/maps/documentation/javascript/examples?hl=es","title":"Librer\u00eda Google Maps JavaScript API V3"},{"location":"google/#mi-primer-mapa","text":"Abriremos el ejemplo de Simple map https://developers.google.com/maps/documentation/javascript/examples/map-simple?hl=es y cambiaremos el Javascript por el siguiente: let map ; function initMap () { const mapOptions = { center : new google . maps . LatLng ( 42 , 2 ), zoom : 9 , mapTypeId : google . maps . MapTypeId . ROADMAP }; map = new google . maps . Map ( document . getElementById ( \"map\" ), mapOptions ); } Center: Posici\u00f3n en coordenadas geogr\u00e1ficas Zoom: Nivel de zoom. El nivel 0 corresponde a nivel mundial. Alcanza hasta 18 niveles de zoom Tipos de mapas: ROADMAP, que muestra los mosaicos normales en 2D predeterminados de Google Maps. SATELLITE muestra im\u00e1genes de sat\u00e9lite. HYBRID muestra una mezcla de mosaicos fotogr\u00e1ficos y una capa de mosaicos para los elementos del mapa m\u00e1s destacados (carreteras, nombres de ciudades, etc.). TERRAIN muestra mosaicos de relieve f\u00edsico para indicar las elevaciones del terreno y las fuentes de agua (monta\u00f1as, r\u00edos, etc.).","title":"Mi primer mapa"},{"location":"google/#controles-de-mapa-integrados","text":"El API de Google Maps dispone de varios controles integrados que puedes emplear en tus mapas: El control de zoom muestra un control deslizante (para mapas grandes) o peque\u00f1os botones \"+/-\" (para mapas peque\u00f1os) que permiten controlar el nivel de zoom del mapa. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada en dispositivos no t\u00e1ctiles o en la esquina inferior izquierda del mapa en los dispositivos t\u00e1ctiles. El control de desplazamiento muestra botones para desplazarse por el mapa. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada en dispositivos no t\u00e1ctiles. El control de desplazamiento tambi\u00e9n te permite girar im\u00e1genes de 45\u00ba, si est\u00e1n disponibles. El control de escala muestra un elemento de escala del mapa. Este control est\u00e1 inhabilitado de forma predeterminada. El control MapType permite al usuario alternar entre los diferentes tipos de mapas, como ROADMAP (mapa de carreteras) y SATELLITE (sat\u00e9lite). Este control aparece en la esquina superior derecha del mapa de forma predeterminada. El control de Street View incluye un icono de hombrecito naranja que se puede arrastrar hasta el mapa para habilitar la funci\u00f3n de Street View. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada. El control de giro incluye un icono circular peque\u00f1o que te permite girar mapas que contienen im\u00e1genes oblicuas. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada (para obtener m\u00e1s informaci\u00f3n, consulta la documentaci\u00f3n sobre im\u00e1genes de 45\u00ba). El control de mapa general muestra un mapa general en miniatura que refleja la ventana gr\u00e1fica del mapa actual dentro de una zona m\u00e1s amplia. Este control aparece en la esquina inferior derecha del mapa y se muestra contra\u00eddo de forma predeterminada. No puedes acceder ni modificar estos controles del mapa directamente, pero puedes modificar los campos MapOptions del mapa que afectan a la visibilidad y a la presentaci\u00f3n de los controles { panControl : booleano , zoomControl : booleano , mapTypeControl : booleano , scaleControl : booleano , streetViewControl : booleano , overviewMapControl : booleano , rotateControl : booleano }","title":"Controles de mapa integrados"},{"location":"google/#opciones-de-los-controles","text":"","title":"Opciones de los controles"},{"location":"google/#control-de-zoom","text":"El control de zoom puede mostrarse en una de las siguientes opciones style: google.maps.ZoomControlStyle.SMALL muestra un control de zoom mini que solo dispone de los botones + y -. Este estilo es adecuado para mapas peque\u00f1os. En los dispositivos t\u00e1ctiles, este control se aparece como botones + y - que responden a los eventos de toque. google.maps.ZoomControlStyle.LARGE muestra el control deslizante de zoom est\u00e1ndar. En los dispositivos t\u00e1ctiles, este control se aparece como botones + y - que responden a los eventos de toque. google.maps.ZoomControlStyle.DEFAULT escoge un control de zoom apropiado en funci\u00f3n del tama\u00f1o del mapa y del dispositivo en el que se est\u00e9 utilizando. zoomControlOptions : { style : google . maps . ZoomControlStyle . SMALL }","title":"Control de zoom"},{"location":"google/#control-maptype","text":"El control MapType puede mostrarse en una de las siguientes opciones style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR muestra el conjunto de controles como botones situados en una barra horizontal como la que se muestra en Google Maps. google.maps.MapTypeControlStyle.DROPDOWN_MENU muestra un control de un solo bot\u00f3n que permite seleccionar el tipo de mapa a trav\u00e9s de un men\u00fa desplegable. google.maps.MapTypeControlStyle.DEFAULT muestra el control \"predeterminado\", que depende del tama\u00f1o de la pantalla y puede cambiar en futuras versiones del API. mapTypeControlOptions : { style : google . maps . MapTypeControlStyle . DROPDOWN_MENU }","title":"Control MapType"},{"location":"google/#como-colocar-los-controles","text":"Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/control-positioning?hl=es","title":"C\u00f3mo colocar los controles"},{"location":"google/#superposiciones","text":"Google Maps API incorpora varios tipos de superposiciones","title":"Superposiciones"},{"location":"google/#marcadores","text":"Los puntos en el mapa se muestran mediante marcadores. En algunas ocasiones, los marcadores pueden mostrar im\u00e1genes de iconos personalizados, que se denominan normalmente \"iconos\". Los marcadores e iconos son objetos de tipo Marker. const myLatLng = { lat : 42 , lng : 2 }; const marker = new google . maps . Marker ({ position : myLatlng , map : map , title : \"Hello World!\" }); Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/marker-simple?hl=es","title":"Marcadores"},{"location":"google/#marcadores-personalizados","text":"new google . maps . Marker ({ position : map . getCenter (), icon : 'http://betaserver.icgc.cat/mapicons/aed-2.png' , map : map , }); Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/marker-symbol-custom?hl=es Pod\u00e9is encontrar m\u00e1s \u00edconos de ejemplo en http://betaserver.icgc.cat/mapicons/ Otro ejemplo con un marker personalizado y un punto de anclaje para que el icono est\u00e9 centrado en la posici\u00f3n del punto del marcador. new google . maps . Marker ({ position : map . getCenter (), icon : { url : 'https://betaserver2.icgc.cat/maki/pin-l-f+ceff00@2x.png' , anchor : new google . maps . Point ( 0 , 90 ) }, map : map , });","title":"Marcadores personalizados"},{"location":"google/#lineas","text":"Las l\u00edneas sobre el mapa se muestran mediante polil\u00edneas, que representan una serie ordenada de ubicaciones. Las l\u00edneas son objetos de tipo Polyline. Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/polyline-simple?hl=es","title":"L\u00edneas"},{"location":"google/#poligonos","text":"Las \u00e1reas del mapa con forma irregular se muestran mediante pol\u00edgonos, que son similares a las polil\u00edneas. Al igual que las polil\u00edneas, los pol\u00edgonos representan una serie ordenada de ubicaciones; la diferencia estriba en que los pol\u00edgonos definen la regi\u00f3n que engloban. Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/polygon-hole?hl=es Pod\u00e9is ver la documentaci\u00f3n tanto de l\u00edneas como de pol\u00edgonos en https://developers.google.com/maps/documentation/javascript/reference/polygon?hl=es","title":"Pol\u00edgonos"},{"location":"google/#ventana-de-informacion","text":"La ventana de informaci\u00f3n es tambi\u00e9n un tipo de superposici\u00f3n especial para la visualizaci\u00f3n de contenido (normalmente texto o im\u00e1genes) en un globo emergente que se muestra sobre el mapa en una ubicaci\u00f3n determinada. Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/infowindow-simple?hl=es","title":"Ventana de informaci\u00f3n"},{"location":"google/#superposiciones-personalizadas","text":"Si quieres, tambi\u00e9n puedes implementar superposiciones personalizadas . Estas superposiciones personalizadas implementan la interfaz OverlayView. Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/overlay-simple?hl=es","title":"Superposiciones personalizadas"},{"location":"google/#geojson","text":"Podemos agregar un geojson desde una URL que lo contenga o desde una variable que contenga el GeoJSON Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/layer-data-style?hl=es const gasolineras = { \"type\" : \"FeatureCollection\" , \"crs\" : { \"type\" : \"name\" , \"properties\" : { \"name\" : \"urn:ogc:def:crs:OGC:1.3:CRS84\" } }, \"features\" : [ { \"type\" : \"Feature\" , \"properties\" : { \"lon\" : - 16.484670 , \"lat\" : 28.428720 , \"Nombre\" : \"REPSOL Horario Especial 0\" }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ - 16.48467 , 28.42872 ] } }, { \"type\" : \"Feature\" , \"properties\" : { \"lon\" : - 16.460470 , \"lat\" : 28.449530 , \"Nombre\" : \"DISA EL BOHIO L-D: 24H 0\" }, \"geometry\" : { \"type\" : \"Point\" , \"coordinates\" : [ - 16.46047 , 28.44953 ] } } ] }; map . data . addGeoJson ( gasolineras );","title":"GeoJSON"},{"location":"google/#kml","text":"Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/layer-kml?hl=es","title":"KML"},{"location":"google/#street-view","text":"Son vistas panor\u00e1micas de 360 grados de las principales rutas del mundo. Se puede utilizar directamente como control en el mapa: MapOptions: streetViewControl: true o false. Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/streetview-simple?hl=es const uab = { lat : 41.503 , lng : 2.109 }; const map = new google . maps . Map ( document . getElementById ( \"map\" ), { center : fenway , zoom : 14 , }); const panorama = new google . maps . StreetViewPanorama ( document . getElementById ( \"pano\" ), { position : uab , pov : { heading : 220 , pitch : 10 }, } ); map . setStreetView ( panorama );","title":"Street View"},{"location":"google/#routing","text":"Google dispone de un servicio de c\u00e1lculo de rutas denominado DirectionsService. Tambi\u00e9n dispone de un servicio de visualizaci\u00f3n de rutas denominado DirectionsRenderer. La petici\u00f3n de una ruta requiere de los siguientes par\u00e1metros. { origin : LatLng | String | google . maps . Place , destination : LatLng | String | google . maps . Place , travelMode : TravelMode , transitOptions : TransitOptions , drivingOptions : DrivingOptions , unitSystem : UnitSystem , waypoints [] : DirectionsWaypoint , optimizeWaypoints : Boolean , provideRouteAlternatives : Boolean , avoidHighways : Boolean , avoidTolls : Boolean , region : String } origin: Origen de la ruta en (LatLng | String | google.maps.Place) destination: Destino de la ruta en (LatLng | String | google.maps.Place) travelMode: Modo de viaje DRIVING: Opci\u00f3n por defecto (Coche) TRANSIT: Transporte p\u00fablico BICYCLING: Bicicleta WALKING: Caminando transitOptions: { arrivalTime: Fecha, departureTime: Fecha, modes[]: (BUS,RAIL,SUBWAY,TRAIN,TRAM) routingPreference: (FEWER_TRANSFERS, LESS_WALKING) } drivingOptions:{ departureTime: Fecha, trafficModel: (BEST_GUESS, OPTIMISTIC, PESSIMISTIC) }, unitSystem: Unidadaes, waypoints[]: Puntos intermedios, optimizeWaypoints: Optimizar puntos intermedios (booleano), provideRouteAlternatives: Mostrar rutes alternatives (booleano), avoidHighways: Evitar autopistes (booleano), avoidTolls: Evitar peajes (booleano), region: Regi\u00f3n donde se calcula la ruta Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/directions-simple?hl=es","title":"Routing"},{"location":"google/#ejemplos","text":"Pod\u00e9is ver m\u00e1s ejemplos de c\u00f3digo en https://developers.google.com/maps/documentation/javascript/examples/ Ejercicio pt Crear un mapa con la API de google maps. Iniciar el mapa centrado en Catalunya El mapa debe tener el fondo Hibrido activado por defecto Agregar un formulario para crear una ruta. 3.1 Las ciudades de origen deben ser: Barcelona, Terrassa, Sabadell, Cerdanyola y Manresa. 3.2 Los destino deben ser: Facultad de Letras de la UAB y el Parque del Tibidabo 3.3 Los medios de transporte debes ser: Conduciendo, Caminando, Bicicleta, Transporte p\u00fablico. 3.4 Bot\u00f3n para calcular la ruta. Mostrar la distancia de la ruta (en Km) y el tiempo de recorrido (en la unidad m\u00e1s adecuada, minutos u horas) Ejemplo ejercicio","title":"Ejemplos"},{"location":"google/#referencias","text":"https://developers.google.com/maps/documentation/javascript/reference/?hl=es","title":"Referencias"},{"location":"openLayers/","text":"OpenLayers OpenLayers facilita la creaci\u00f3n de un mapas din\u00e1micos en cualquier p\u00e1gina web. Puede mostrar mosaicos de mapas, datos vectoriales y marcadores cargados desde cualquier fuente. OpenLayers se ha desarrollado para promover el uso de informaci\u00f3n geogr\u00e1fica de todo tipo. Es JavaScript de c\u00f3digo abierto completamente gratuito, publicado bajo la licencia BSD de 2 cl\u00e1usulas (tambi\u00e9n conocida como FreeBSD). 1 Es una librer\u00eda JavaScript orientada a objetos. Usar la librer\u00eda implica crear objetos de las clases que proporciona e interactuar con ellos. Es necesario conocer los objetos principales y acudir a los manuales de referencia 2 Mi primer mapa Crear un archivo llamado openlayers.html y copiar lo siguiente: <!DOCTYPE html> < html lang = \"es\" > < head > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css\" type = \"text/css\" > < style > . map { height : 600 px ; width : 100 % ; } </ style > < script src = \"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js\" ></ script > < title > Ejemplo OpenLayers </ title > </ head > < body > < h2 > Mi primer mapa </ h2 > < div id = \"map\" class = \"map\" ></ div > < script type = \"text/javascript\" > const map = new ol . Map ({ target : 'map' , layers : [ new ol . layer . Tile ({ source : new ol . source . OSM () }) ], view : new ol . View ({ center : ol . proj . fromLonLat ([ 1.5 , 45.1 ]), zoom : 9 }) }); </ script > </ body > </ html > Resumen de pasos 1. Incluir las librer\u00edas de OpenLayers 2. Crear un contenedor DIV donde dibujar el mapa 3. Declarar una variable global a la que asignar el mapa 4. Definir una funci\u00f3n de inicializaci\u00f3n del mapa 1. Crear un mapa (objeto ol.Map) 2. Crear capas (objeto ol.Layer) 3. A\u00f1adir capas al mapa 4. Posicionar la vista del mapa Principales objetos El mapa y la vista ol/Map es la clase principal de OpenLayers ya que define el mapa. Se representa en un contenedor de destino terget (por ejemplo, un elemento div en la p\u00e1gina web que contiene el mapa). Todas las propiedades del mapa se pueden configurar en el momento de la construcci\u00f3n o mediante m\u00e9todos de establecimiento, por Ej. setTarget(). Para crear un mapa const map = new ol . Map ( options ); options son las opciones de configuraci\u00f3n del mapa en forma de pares de claves y valores separados por comas. Por ejemplo { view : new View ({ center : [ 0 , 0 ], zoom : 1 }), layers : [ new TileLayer ({ source : new OSM () }) ], target : 'map' } ol/View representa una vista simple 2D del mapa. El mapa no es responsable de cosas como el centro, el nivel de zoom y la proyecci\u00f3n del mapa. En cambio, estas son propiedades de una instancia ol/View. Para crear una vista const view = new ol . View ( options ); Donde options son las opciones de la vista. Las opciones principales son: center: coordenadas iniciales del centro de la vista zoom: nivel de zoom inicial maxZoom: m\u00e1ximo nivel de zoom. minZoom: m\u00ednimo nivel de zoom. projection: sistema de referencia de la proyecci\u00f3n del mapa. Por defecto EPSG:3857 Controles Los controles son los objetos que proporcionan informaci\u00f3n del mapa y posibilitan interaccionar con el propio mapa y las capas. Todos los controles se derivan de la clase ol.Control como por ejemplo: ol.Control.Zoom, ol.Control.Rotate. Por defecto el mapa tiene los siguientes controles ol/control/Zoom: botones para aumentar y disminuir el zoom ol/control/Rotate: permite rotar el mapa ol/control/Attribution: muestra la propiedad attribution de las capas Para a\u00f1adir controles al mapa se utilizan sus m\u00e9todos addControl Algunos de los principales controles son: ol.FullScreen: Barra de niveles de escala ol.MousePosition: Coordenadas del puntero. ol.OverviewMap: Mapa gu\u00eda ol.ScaleLine: Escala del mapa ol.ZoomSlider: Zoom mediante barra ol.ZoomToExtent: Zoom a una extensi\u00f3n Diferentes tipos de capas y sus origenes Para obtener datos remotos para una capa, OpenLayers usa subclases ol/source/Source que especifica el origen de la informaci\u00f3n de la capa. OpenLayers tiene disponibles sources para servicios de mosaicos de mapas gratuitos y comerciales como OpenStreetMap o Bing, para fuentes OGC como WMS o WMTS, y para datos vectoriales en formatos como GeoJSON o KML. Las capas son los objetos que permiten a\u00f1adir informaci\u00f3n geogr\u00e1fica al mapa, es una representaci\u00f3n visual de datos de una fuente source . Todos las capas se derivan de la clase ol.Layer como por ejemplo: ol.Layer.Tile, ol.Layer.Vector, ol.Layer.VectorTile. Para a\u00f1adir capas al mapa se utilizan sus m\u00e9todos addLayer OpenLayers clasifica las capas seg\u00fan: Capas base y de superposici\u00f3n: S\u00f3lo hay una capa base visible en cada momento, mientras que de superposici\u00f3n puede haber todas las necesarias. OpenLayers tiene cuatro tipos b\u00e1sicos de capas: ol/layer/Tile: renderiza fuentes que proporcionan im\u00e1genes en mosaico en cuadr\u00edculas que est\u00e1n organizadas por niveles de zoom para resoluciones espec\u00edficas. ol/layer/Image: renderiza fuentes que proporcionan im\u00e1genes de mapas en extensiones y resoluciones arbitrarias. ol/layer/Vector: renderiza datos vectoriales del lado del cliente. ol/layer/VectorTile: renderiza los datos que se proporcionan como mosaicos vectoriales. En las capas vectoriales la fuente de informaci\u00f3n no es una imagen (mapa renderizado) sino elementos geogr\u00e1ficos (geometr\u00edas de tipo punto, l\u00ednea o pol\u00edgono) y es el navegador quien se encarga de dibujarlas utilizando las capacidades de dibujo vectorial (SVG, VML y canvas). En ella se gestiona una lista de features ( ol.Feature ) que se componen de: Geometr\u00eda ( ol.geom.Geometry ) id: identificador Estilo de simbolizaci\u00f3n ( ol.style.Style ) Uno de los puntos fuertes de OpenLayers es que puede trabajar con muchos tipos de capas y formatos vectoriales: Servicios OGC WMS, WFS, WCS y WMTS Cach\u00e9s: WMTS, TileCache, XYZ (tipo Google) y ArcGIS Server Formatos vectoriales: GML, KML, GeoJSON, WKT, GPX, GeoRSS, Atom... WMS Podemos hacer peticiones a servicios WMS como una imagen simple usando ImageLayer como haciendo peticiones teseladas usando TileLayer Ejemplo WMS teselado const inundacion500Teselada = new ol . layer . Tile ({ source : new ol . source . TileWMS ({ url : 'https://servicios.idee.es/wms-inspire/riesgos-naturales/inundaciones?' , params : { 'LAYERS' : 'NZ.Flood.FluvialT500' , 'FORMAT' : 'image/png' , 'TRANSPARENT' : 'true' } }) }); map . addLayer ( inundacion500Teselada ); Ejemplo WMS imagen simple const inundacion500Simple = new ol . layer . Image ({ source : new ol . source . ImageWMS ({ url : 'https://servicios.idee.es/wms-inspire/riesgos-naturales/inundaciones?' , params : { 'LAYERS' : 'NZ.Flood.FluvialT500' , 'FORMAT' : 'image/png' , 'TRANSPARENT' : 'true' } }) }); map . addLayer ( inundacion500Simple ); GeoJSON Los tres ingredientes importantes para trabajar con datos vectoriales: Un formato para leer y escribir datos serializados (GeoJSON en este caso ol.format.GeoJSON ) Una fuente de vector para obtener los datos y administrar un \u00edndice espacial de caracter\u00edsticas. ( ol.source.Vector ) Una capa vectorial para representar las entidades en el mapa ( ol.layer.Vector ) Ejemplo de cargar de GeoJSON desde una URL. const vectorSource = new ol . source . Vector ({ url : \"https://raw.githubusercontent.com/geostarters/dades/master/fulls50M.geojson\" , format : new ol . format . GeoJSON () }); const vectorLayer = new ol . layer . Vector ({ source : vectorSource , style : new ol . style . Style ({ stroke : new ol . style . Stroke ({ color : 'blue' , lineDash : [ 4 ], width : 3 , }), fill : new ol . style . Fill ({ color : 'rgba(0, 0, 255, 0.1)' , }), }), }); map . addLayer ( vectorLayer ); Proyecciones OpenLayers permite hacer reproyecciones tanto de capas vectoriales como de capas r\u00e1ster en el navegador. Esto es una gran ventaja ya que la tranformaci\u00f3n de capas r\u00e1ster en el cliente (navegador) permite consumir servicios en SRS que inicialmente no est\u00e1n soportados por el proveedor del servicio. Se puede decir que esta capacidad es un punto fuerte que lo diferencia de otras librer\u00edas de mapas. La tranformaci\u00f3n de las capas vectoriales ya es m\u00e1s com\u00fan en otras librer\u00edas y permite consumir datos vectoriales que estan en un SRS diferente al definido en nuestro mapa. Para hacer la reproyecciones OpenLayers usa la librer\u00eda de Proj4. Reproyecci\u00f3n Raster OpenLayers tiene la capacidad de mostrar datos r\u00e1ster de WMS, WMTS, im\u00e1genes est\u00e1ticas y muchas otras fuentes en un sistema de coordenadas diferente al que se entrega desde el servidor. La transformaci\u00f3n de las proyecciones cartogr\u00e1ficas de la imagen se realiza directamente en un navegador web. La vista en cualquier sistema de referencia de coordenadas compatible con Proj4js es posible y ahora se pueden combinar y superponer capas previamente incompatibles. Ejemplo: https://openlayers.org/en/latest/doc/tutorials/raster-reprojection.html Reproyeccion Vector Ejemplo: http://dev.openlayers.org/examples/using-proj4js.html Ejemplos Pod\u00e9is ver m\u00e1s ejemplos de c\u00f3digo en https://openlayers.org/en/latest/examples/ Tambi\u00e9n pod\u00e9is ver un worlshop con ejemplos en https://openlayers.org/workshop/en/ Ejercicio pt Preparar un mapa con la capa de OpenStreetMap centrada en Catalunya. Agregar al mapa el servicio WMS del ICGC de la ortofoto 25c. A\u00f1adir el control fullscreen A\u00f1adir los municipios de Catalunya en formato geojson. ( https://raw.githubusercontent.com/geostarters/dades/master/Municipis_Catalunya_EPSG25831.geojson ) Agregar el control de capas ( https://github.com/walkermatt/ol-layerswitcher ) Referencias https://openlayers.org/ \u21a9 https://openlayers.org/en/latest/apidoc/ \u21a9","title":"OpenLayers"},{"location":"openLayers/#openlayers","text":"OpenLayers facilita la creaci\u00f3n de un mapas din\u00e1micos en cualquier p\u00e1gina web. Puede mostrar mosaicos de mapas, datos vectoriales y marcadores cargados desde cualquier fuente. OpenLayers se ha desarrollado para promover el uso de informaci\u00f3n geogr\u00e1fica de todo tipo. Es JavaScript de c\u00f3digo abierto completamente gratuito, publicado bajo la licencia BSD de 2 cl\u00e1usulas (tambi\u00e9n conocida como FreeBSD). 1 Es una librer\u00eda JavaScript orientada a objetos. Usar la librer\u00eda implica crear objetos de las clases que proporciona e interactuar con ellos. Es necesario conocer los objetos principales y acudir a los manuales de referencia 2","title":"OpenLayers"},{"location":"openLayers/#mi-primer-mapa","text":"Crear un archivo llamado openlayers.html y copiar lo siguiente: <!DOCTYPE html> < html lang = \"es\" > < head > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css\" type = \"text/css\" > < style > . map { height : 600 px ; width : 100 % ; } </ style > < script src = \"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js\" ></ script > < title > Ejemplo OpenLayers </ title > </ head > < body > < h2 > Mi primer mapa </ h2 > < div id = \"map\" class = \"map\" ></ div > < script type = \"text/javascript\" > const map = new ol . Map ({ target : 'map' , layers : [ new ol . layer . Tile ({ source : new ol . source . OSM () }) ], view : new ol . View ({ center : ol . proj . fromLonLat ([ 1.5 , 45.1 ]), zoom : 9 }) }); </ script > </ body > </ html > Resumen de pasos 1. Incluir las librer\u00edas de OpenLayers 2. Crear un contenedor DIV donde dibujar el mapa 3. Declarar una variable global a la que asignar el mapa 4. Definir una funci\u00f3n de inicializaci\u00f3n del mapa 1. Crear un mapa (objeto ol.Map) 2. Crear capas (objeto ol.Layer) 3. A\u00f1adir capas al mapa 4. Posicionar la vista del mapa","title":"Mi primer mapa"},{"location":"openLayers/#principales-objetos","text":"","title":"Principales objetos"},{"location":"openLayers/#el-mapa-y-la-vista","text":"ol/Map es la clase principal de OpenLayers ya que define el mapa. Se representa en un contenedor de destino terget (por ejemplo, un elemento div en la p\u00e1gina web que contiene el mapa). Todas las propiedades del mapa se pueden configurar en el momento de la construcci\u00f3n o mediante m\u00e9todos de establecimiento, por Ej. setTarget(). Para crear un mapa const map = new ol . Map ( options ); options son las opciones de configuraci\u00f3n del mapa en forma de pares de claves y valores separados por comas. Por ejemplo { view : new View ({ center : [ 0 , 0 ], zoom : 1 }), layers : [ new TileLayer ({ source : new OSM () }) ], target : 'map' } ol/View representa una vista simple 2D del mapa. El mapa no es responsable de cosas como el centro, el nivel de zoom y la proyecci\u00f3n del mapa. En cambio, estas son propiedades de una instancia ol/View. Para crear una vista const view = new ol . View ( options ); Donde options son las opciones de la vista. Las opciones principales son: center: coordenadas iniciales del centro de la vista zoom: nivel de zoom inicial maxZoom: m\u00e1ximo nivel de zoom. minZoom: m\u00ednimo nivel de zoom. projection: sistema de referencia de la proyecci\u00f3n del mapa. Por defecto EPSG:3857","title":"El mapa y la vista"},{"location":"openLayers/#controles","text":"Los controles son los objetos que proporcionan informaci\u00f3n del mapa y posibilitan interaccionar con el propio mapa y las capas. Todos los controles se derivan de la clase ol.Control como por ejemplo: ol.Control.Zoom, ol.Control.Rotate. Por defecto el mapa tiene los siguientes controles ol/control/Zoom: botones para aumentar y disminuir el zoom ol/control/Rotate: permite rotar el mapa ol/control/Attribution: muestra la propiedad attribution de las capas Para a\u00f1adir controles al mapa se utilizan sus m\u00e9todos addControl Algunos de los principales controles son: ol.FullScreen: Barra de niveles de escala ol.MousePosition: Coordenadas del puntero. ol.OverviewMap: Mapa gu\u00eda ol.ScaleLine: Escala del mapa ol.ZoomSlider: Zoom mediante barra ol.ZoomToExtent: Zoom a una extensi\u00f3n","title":"Controles"},{"location":"openLayers/#diferentes-tipos-de-capas-y-sus-origenes","text":"Para obtener datos remotos para una capa, OpenLayers usa subclases ol/source/Source que especifica el origen de la informaci\u00f3n de la capa. OpenLayers tiene disponibles sources para servicios de mosaicos de mapas gratuitos y comerciales como OpenStreetMap o Bing, para fuentes OGC como WMS o WMTS, y para datos vectoriales en formatos como GeoJSON o KML. Las capas son los objetos que permiten a\u00f1adir informaci\u00f3n geogr\u00e1fica al mapa, es una representaci\u00f3n visual de datos de una fuente source . Todos las capas se derivan de la clase ol.Layer como por ejemplo: ol.Layer.Tile, ol.Layer.Vector, ol.Layer.VectorTile. Para a\u00f1adir capas al mapa se utilizan sus m\u00e9todos addLayer OpenLayers clasifica las capas seg\u00fan: Capas base y de superposici\u00f3n: S\u00f3lo hay una capa base visible en cada momento, mientras que de superposici\u00f3n puede haber todas las necesarias. OpenLayers tiene cuatro tipos b\u00e1sicos de capas: ol/layer/Tile: renderiza fuentes que proporcionan im\u00e1genes en mosaico en cuadr\u00edculas que est\u00e1n organizadas por niveles de zoom para resoluciones espec\u00edficas. ol/layer/Image: renderiza fuentes que proporcionan im\u00e1genes de mapas en extensiones y resoluciones arbitrarias. ol/layer/Vector: renderiza datos vectoriales del lado del cliente. ol/layer/VectorTile: renderiza los datos que se proporcionan como mosaicos vectoriales. En las capas vectoriales la fuente de informaci\u00f3n no es una imagen (mapa renderizado) sino elementos geogr\u00e1ficos (geometr\u00edas de tipo punto, l\u00ednea o pol\u00edgono) y es el navegador quien se encarga de dibujarlas utilizando las capacidades de dibujo vectorial (SVG, VML y canvas). En ella se gestiona una lista de features ( ol.Feature ) que se componen de: Geometr\u00eda ( ol.geom.Geometry ) id: identificador Estilo de simbolizaci\u00f3n ( ol.style.Style ) Uno de los puntos fuertes de OpenLayers es que puede trabajar con muchos tipos de capas y formatos vectoriales: Servicios OGC WMS, WFS, WCS y WMTS Cach\u00e9s: WMTS, TileCache, XYZ (tipo Google) y ArcGIS Server Formatos vectoriales: GML, KML, GeoJSON, WKT, GPX, GeoRSS, Atom...","title":"Diferentes tipos de capas y sus origenes"},{"location":"openLayers/#wms","text":"Podemos hacer peticiones a servicios WMS como una imagen simple usando ImageLayer como haciendo peticiones teseladas usando TileLayer Ejemplo WMS teselado const inundacion500Teselada = new ol . layer . Tile ({ source : new ol . source . TileWMS ({ url : 'https://servicios.idee.es/wms-inspire/riesgos-naturales/inundaciones?' , params : { 'LAYERS' : 'NZ.Flood.FluvialT500' , 'FORMAT' : 'image/png' , 'TRANSPARENT' : 'true' } }) }); map . addLayer ( inundacion500Teselada ); Ejemplo WMS imagen simple const inundacion500Simple = new ol . layer . Image ({ source : new ol . source . ImageWMS ({ url : 'https://servicios.idee.es/wms-inspire/riesgos-naturales/inundaciones?' , params : { 'LAYERS' : 'NZ.Flood.FluvialT500' , 'FORMAT' : 'image/png' , 'TRANSPARENT' : 'true' } }) }); map . addLayer ( inundacion500Simple );","title":"WMS"},{"location":"openLayers/#geojson","text":"Los tres ingredientes importantes para trabajar con datos vectoriales: Un formato para leer y escribir datos serializados (GeoJSON en este caso ol.format.GeoJSON ) Una fuente de vector para obtener los datos y administrar un \u00edndice espacial de caracter\u00edsticas. ( ol.source.Vector ) Una capa vectorial para representar las entidades en el mapa ( ol.layer.Vector ) Ejemplo de cargar de GeoJSON desde una URL. const vectorSource = new ol . source . Vector ({ url : \"https://raw.githubusercontent.com/geostarters/dades/master/fulls50M.geojson\" , format : new ol . format . GeoJSON () }); const vectorLayer = new ol . layer . Vector ({ source : vectorSource , style : new ol . style . Style ({ stroke : new ol . style . Stroke ({ color : 'blue' , lineDash : [ 4 ], width : 3 , }), fill : new ol . style . Fill ({ color : 'rgba(0, 0, 255, 0.1)' , }), }), }); map . addLayer ( vectorLayer );","title":"GeoJSON"},{"location":"openLayers/#proyecciones","text":"OpenLayers permite hacer reproyecciones tanto de capas vectoriales como de capas r\u00e1ster en el navegador. Esto es una gran ventaja ya que la tranformaci\u00f3n de capas r\u00e1ster en el cliente (navegador) permite consumir servicios en SRS que inicialmente no est\u00e1n soportados por el proveedor del servicio. Se puede decir que esta capacidad es un punto fuerte que lo diferencia de otras librer\u00edas de mapas. La tranformaci\u00f3n de las capas vectoriales ya es m\u00e1s com\u00fan en otras librer\u00edas y permite consumir datos vectoriales que estan en un SRS diferente al definido en nuestro mapa. Para hacer la reproyecciones OpenLayers usa la librer\u00eda de Proj4.","title":"Proyecciones"},{"location":"openLayers/#reproyeccion-raster","text":"OpenLayers tiene la capacidad de mostrar datos r\u00e1ster de WMS, WMTS, im\u00e1genes est\u00e1ticas y muchas otras fuentes en un sistema de coordenadas diferente al que se entrega desde el servidor. La transformaci\u00f3n de las proyecciones cartogr\u00e1ficas de la imagen se realiza directamente en un navegador web. La vista en cualquier sistema de referencia de coordenadas compatible con Proj4js es posible y ahora se pueden combinar y superponer capas previamente incompatibles. Ejemplo: https://openlayers.org/en/latest/doc/tutorials/raster-reprojection.html","title":"Reproyecci\u00f3n Raster"},{"location":"openLayers/#reproyeccion-vector","text":"Ejemplo: http://dev.openlayers.org/examples/using-proj4js.html","title":"Reproyeccion Vector"},{"location":"openLayers/#ejemplos","text":"Pod\u00e9is ver m\u00e1s ejemplos de c\u00f3digo en https://openlayers.org/en/latest/examples/ Tambi\u00e9n pod\u00e9is ver un worlshop con ejemplos en https://openlayers.org/workshop/en/ Ejercicio pt Preparar un mapa con la capa de OpenStreetMap centrada en Catalunya. Agregar al mapa el servicio WMS del ICGC de la ortofoto 25c. A\u00f1adir el control fullscreen A\u00f1adir los municipios de Catalunya en formato geojson. ( https://raw.githubusercontent.com/geostarters/dades/master/Municipis_Catalunya_EPSG25831.geojson ) Agregar el control de capas ( https://github.com/walkermatt/ol-layerswitcher )","title":"Ejemplos"},{"location":"openLayers/#referencias","text":"https://openlayers.org/ \u21a9 https://openlayers.org/en/latest/apidoc/ \u21a9","title":"Referencias"}]}