{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programaci\u00f3 de geoaplicacions web","text":"<p>Materiales para el curso sobre Programaci\u00f3 de geoaplicacions web del M\u00e0ster en Geoinformaci\u00f3 de la UAB</p> <p>Temario:</p>"},{"location":"#httpsgss-mtiggithubiogeo-web-mgeo","title":"https://gss-mtig.github.io/geo-web-mgeo/","text":""},{"location":"#autores","title":"Autores","text":"<ul> <li>Wladimir Szczerban (alias Bolo) @bolosig, geostarter (ICGC)</li> <li>Ignacio Ferrero (Departamento de Geograf\u00eda UAB)</li> </ul> <p>Condiciones de reutilizaci\u00f3n de estos apuntes</p> <p>Estos materiales est\u00e1n publicados bajo licencia CreativeCommons (by-sa) 4.0 internacional</p> <p>Usted es libre de: * Compartir \u2014 copiar y redistribuir el material en cualquier medio o formato * Adaptar \u2014 remezclar, transformar y crear a partir del material para cualquier finalidad, incluso comercial.</p> <p>Bajo las condiciones siguientes:</p> <ul> <li> <p>Reconocimiento \u2014 Debe reconocer adecuadamente la autor\u00eda, proporcionar un enlace a la licencia e indicar si se han realizado cambios. Puede hacerlo de cualquier manera razonable, pero no de una manera que sugiera que tiene el apoyo del licenciador o lo recibe por el uso que hace.</p> </li> <li> <p>CompartirIgual \u2014 Si remezcla, transforma o crea a partir del material, deber\u00e1 difundir sus contribuciones bajo la misma licencia que el original.</p> </li> <li> <p>No hay restricciones adicionales \u2014 No puede aplicar t\u00e9rminos legales o medidas tecnol\u00f3gicas que legalmente restrinjan realizar aquello que la licencia permite.</p> </li> </ul>"},{"location":"arcgis/","title":"ArcGIS API for Javascript","text":"<p>La ArcGIS API for JavaScript permite crear aplicaciones web interactivas y tiene visualizaciones tanto en 2D como en 3D. Forma parte de todo el ecosistema ArcGIS de ESRI.</p> <p>Al igual que la API de google est\u00e1 soportada por una gran empresa como lo \u00e9s ESRI. Est\u00e1 integrado con los recursos de la platadforma de ArcGIS Online. Para acceder a los servicios de ArcGIS como por ejemplo el mapa base, geocodificador, routing, etc es necesario tener una API KEY y tienen un coste (aunque tienen uso gratis pero limitado).  </p> <p>La referencia de la API la podemos ver en https://developers.arcgis.com/javascript/latest/</p>"},{"location":"arcgis/#generar-la-api-key","title":"Generar la API KEY","text":"<ol> <li>Ingresar en el dashbord https://developers.arcgis.com/dashboard/</li> <li>Seleccionar la opci\u00f3n de ArcGIS API for JavaScript</li> <li>Seleccionar la opci\u00f3n de \"no quiero especificar\"</li> <li>Hacer click en el bot\u00f3n de nueva API KEY</li> </ol>"},{"location":"arcgis/#mi-primer-mapa","title":"Mi primer mapa","text":"<p>Crear un archivo llamado arcgis.html y copiar lo siguiente:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://js.arcgis.com/4.28/esri/themes/light/main.css\"&gt;\n    &lt;style&gt;\n        html,\n        body,\n        #viewDiv {\n          padding: 0;\n          margin: 0;\n          height: 100%;\n          width: 100%;\n        }\n    &lt;/style&gt;\n\n    &lt;script src=\"https://js.arcgis.com/4.28/\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        require([\"esri/config\",\"esri/Map\", \"esri/views/MapView\"], function (esriConfig,Map, MapView) {\n\n            esriConfig.apiKey = \"YOUR_API_KEY\";\n\n            const map = new Map({\n                basemap: \"topo-vector\" // Basemap layer service\n            });\n\n            const view = new MapView({\n                map: map,\n                center: [2, 41.5], // Longitude, latitude\n                zoom: 7, // Zoom level\n                container: \"viewDiv\" // Div element\n            });\n\n        });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"viewDiv\"&gt;&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Una diferencia con las otras librerias de mapas que veremos es el concepto de cargar m\u00f3dulos. Podemos ver en nuestro c\u00f3digo que se llama a la funci\u00f3n require y que se le pasa una matriz como par\u00e1metro. Esta matriz contiene los m\u00f3dulos que queremos cargar. </p>"},{"location":"arcgis/#estilos-disponibles","title":"Estilos disponibles","text":"<p>La API dispone de varios estilos (themes) para la interfaz de la aplicaci\u00f3n</p> <p>Podemos ver los estilo en https://developers.arcgis.com/javascript/latest/styling/#themes</p>"},{"location":"arcgis/#algunos-widgets-disponibles","title":"Algunos Widgets disponibles","text":"<p>https://developers.arcgis.com/javascript/latest/api-reference/</p> <ul> <li>BaseMap Toggle: permite al usuario final cambiar entre mapas base. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapToggle.html</li> <li>LayerList: proporciona una forma de mostrar una lista de capas y activar / desactivar su visibilidad. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html</li> <li>Legend: muestra etiquetas y s\u00edmbolos para capas en un mapa. Las etiquetas y sus s\u00edmbolos correspondientes dependen de los valores establecidos en la capa. La leyenda solo mostrar\u00e1 las capas y subcapas que son visibles en la vista. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html </li> <li>Locate: anima la vista a la ubicaci\u00f3n actual del usuario. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Locate.html</li> <li>Measurement: agrupa y administra m\u00faltiples herramientas de medici\u00f3n y le permite cambiar f\u00e1cilmente entre ellas. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html</li> <li>ScaleBar: muestra una barra de escala en el mapa o en un nodo HTML especificado. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-ScaleBar.html</li> <li>Print: conecta su aplicaci\u00f3n con un servicio de impresi\u00f3n para permitir la impresi\u00f3n del mapa. Aprovecha la funcionalidad de impresi\u00f3n cartogr\u00e1fica completa de alta calidad del lado del servidor mediante el servicio ExportWebMap de ArcGIS, que se puede configurar con plantillas de dise\u00f1o personalizadas. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Print.html</li> <li>Editor: proporciona una experiencia de edici\u00f3n lista para usar para ayudar a optimizar la experiencia de edici\u00f3n dentro de una aplicaci\u00f3n web. https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Editor.html</li> </ul> <pre><code>let scaleBar = new ScaleBar({\n    view: view\n});\n// Agregar widget en la esquina inferior izquierda de la vista\nview.ui.add(scaleBar, {\n    position: \"bottom-left\"\n});\n</code></pre>"},{"location":"arcgis/#tipos-de-capas","title":"Tipos de capas","text":""},{"location":"arcgis/#raster","title":"Raster","text":"<ul> <li>MapImageLayer: permite mostrar y analizar datos de subcapas definidas en un servicio de mapas, exportando im\u00e1genes en lugar de elementos. Las im\u00e1genes del servicio de mapas se generan din\u00e1micamente en el servidor en funci\u00f3n de una solicitud, que incluye un LOD (nivel de detalle), un cuadro delimitador, dpi, referencia espacial y otras opciones. Servicio que viene de  ArcGIS Server. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html</li> <li>ImageryTileLayer: presenta datos r\u00e1ster de un servicio de im\u00e1genes en teselas. Servicio que viene de  ArcGIS Server. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryTileLayer.html</li> <li>WebTileLayer: proporciona una forma sencilla de agregar mapas de teselas que no son de ArcGIS Server como una capa a un mapa. Esto corresponde a los servicios XYZ. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WebTileLayer.html</li> <li>WMSLayer: se utiliza para crear capas basadas en OGC Web Map Services (WMS). WMSLayer inicialmente ejecuta una solicitud WMS GetCapabilities, que puede requerir CORS o una p\u00e1gina de proxy. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WMSLayer.html</li> <li>WMTSLayer: se utiliza para crear capas basadas en OGC Web Map Services (WMTS). Al igual que el WMSLayer el WMTSLayer inicialmente ejecuta una solicitud WMTS GetCapabilities, que puede requerir CORS o una p\u00e1gina de proxy. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WMTSLayer.html</li> <li>OpenStreetMapLayer: permite usar mapas base de OpenStreetMap. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-OpenStreetMapLayer.html</li> </ul>"},{"location":"arcgis/#vector","title":"Vector","text":"<ul> <li>FeatureLayer: se puede crear a partir de un servicio de mapas o un servicio de entidades; Elementos del portal de ArcGIS Online o ArcGIS Enterprise; o de una variedad de funciones del lado del cliente. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html</li> <li>CSVLayer: es una capa de puntos basada en un archivo CSV (.csv, .txt). CSV es un formato de archivo de texto sin formato que se utiliza para representar datos tabulares, incluidas caracter\u00edsticas de puntos geogr\u00e1ficos (latitud, longitud). Normalmente, la coordenada de latitud es el valor Y y la coordenada de longitud es el valor X. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html</li> <li>GeoRSSLayer: se usa para crear una capa basada en GeoRSS. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoRSSLayer.html</li> <li>KMLLayer: se utiliza para crear una capa basada en un archivo KML (.kml, .kmz). https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-KMLLayer.html</li> <li>GeoJSONLayer: se utiliza para crear una capa basada en GeoJSON. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-GeoJSONLayer.html</li> <li>VectorTileLayer: accede a teselas de datos almacenados en cach\u00e9 y los presenta en formato vectorial. La forma en que se muestra VectorTileLayer est\u00e1 definida por la Especificaci\u00f3n de estilo de Mapbox. La informaci\u00f3n de estilo de VectorTileLayer se almacena por separado de sus mosaicos. https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html</li> </ul>"},{"location":"arcgis/#ejemplos","title":"Ejemplos","text":"<p>Pod\u00e9is ver m\u00e1s ejemplos de c\u00f3digo en https://developers.arcgis.com/javascript/latest/sample-code/ </p> <p>Ejercicio 0.5 pts</p> <ol> <li>Preparar un mapa con la capa Osm centrada en Espa\u00f1a. Referencia de las capas base: https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#basemap</li> <li>Sobre el ejercicio anterior a\u00f1adir el widget toggleMap para cambiar entre la capa Osm y la capa satellite.</li> <li>A\u00f1adir servicio WMS del ICGC de la ortofoto de 25c. </li> </ol> <p>Realizar los 3 puntos anterios son (0.5 pt) en el caso contrario 0 pt.</p>"},{"location":"arcgis/#referencias","title":"Referencias","text":"<p>https://developers.arcgis.com/javascript/latest/</p>"},{"location":"google/","title":"Librer\u00eda Google Maps JavaScript API V3","text":"<p>La API de Google Maps forma parte de la Google Maps Platform lo que f\u00e1cilita la integraci\u00f3n con todos los productos disponibles de esta plataforma. </p> <p>Es una API que est\u00e1 bien documentada y cuenta con el poder de Google para su desarrollo y mantenimiento. Tiene una muy buena integraci\u00f3n con diferentes servicios de Google como lo son el routing, places (para buscar lugares), SDK tanto para iOS como para Android, etc. Todo esto tiene un coste y m\u00e1s ahora que desde el 2018 cambiaron su pol\u00edtica de precios y han aumentado mucho los precios.</p> <p>La referencia de la API la podemos ver en https://developers.google.com/maps/documentation/javascript/reference/?hl=es</p> <p>Warning</p> <p>Para obtener una API KEY hay que tener una cuenta de google y introducir un n\u00fameor de tarjeta de cr\u00e9dito (aunque no cobren nada durante el per\u00edodo de prueba). Dado que no vamos a introducir ning\u00fan n\u00famero de tarjeta de cr\u00e9dito los ejemplos los veremos directamente de los ejemplos de la documentaci\u00f3n de google.</p> <p>Si tenemos uan API KEY podemos cargar la libreria en nuestro html de la siguiente forma:</p> <pre><code>&lt;script&gt;\n  (g=&gt;{var h,a,k,p=\"The Google Maps JavaScript API\",c=\"google\",l=\"importLibrary\",q=\"__ib__\",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=&gt;h||(h=new Promise(async(f,n)=&gt;{await (a=m.createElement(\"script\"));e.set(\"libraries\",[...r]+\"\");for(k in g)e.set(k.replace(/[A-Z]/g,t=&gt;\"_\"+t[0].toLowerCase()),g[k]);e.set(\"callback\",c+\".maps.\"+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=&gt;h=n(Error(p+\" could not load.\"));a.nonce=m.querySelector(\"script[nonce]\")?.nonce||\"\";m.head.append(a)}));d[l]?console.warn(p+\" only loads once. Ignoring:\",g):d[l]=(f,...n)=&gt;r.add(f)&amp;&amp;u().then(()=&gt;d[l](f,...n))})({\n    key: \"YOUR_API_KEY\",\n    v: \"weekly\",\n    // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).\n    // Add other bootstrap parameters as needed, using camel case.\n  });\n&lt;/script&gt;\n</code></pre> <p>Los ejemplos de la API los podemos ver en https://developers.google.com/maps/documentation/javascript/examples?hl=es</p>"},{"location":"google/#mi-primer-mapa","title":"Mi primer mapa","text":"<p>Abriremos el ejemplo de Simple map https://developers.google.com/maps/documentation/javascript/examples/map-simple?hl=es y cambiaremos el Javascript por el siguiente:</p> <pre><code>let map;\n\nasync function initMap() {\n  const { Map } = await google.maps.importLibrary(\"maps\");\n\n    const mapOptions = {\n    center: { lat: 42, lng: 2 }, // o new google.maps.LatLng(42,2),\n    zoom:9,\n    mapTypeId: 'satellite' //o  google.maps.MapTypeId.SATELLITE\n  };\n\n  map = new Map(document.getElementById(\"map\"), mapOptions);\n\n}\n</code></pre> <ul> <li>Center: Posici\u00f3n en coordenadas geogr\u00e1ficas</li> <li>Zoom: Nivel de zoom. El nivel 0 corresponde a nivel mundial. Alcanza hasta 18 niveles de zoom</li> <li>Tipos de mapas:<ul> <li>ROADMAP, que muestra los mosaicos normales en 2D predeterminados de Google Maps.</li> <li>SATELLITE muestra im\u00e1genes de sat\u00e9lite.</li> <li>HYBRID muestra una mezcla de mosaicos fotogr\u00e1ficos y una capa de mosaicos para los elementos del mapa m\u00e1s destacados (carreteras, nombres de ciudades, etc.).</li> <li>TERRAIN muestra mosaicos de relieve f\u00edsico para indicar las elevaciones del terreno y las fuentes de agua (monta\u00f1as, r\u00edos, etc.).</li> </ul> </li> </ul>"},{"location":"google/#controles-de-mapa-integrados","title":"Controles de mapa integrados","text":"<p>El API de Google Maps dispone de varios controles integrados que puedes emplear en tus mapas:</p> <ul> <li>El control de zoom muestra un control deslizante (para mapas grandes) o peque\u00f1os botones \"+/-\" (para mapas peque\u00f1os) que permiten controlar el nivel de zoom del mapa. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada en dispositivos no t\u00e1ctiles o en la esquina inferior izquierda del mapa en los dispositivos t\u00e1ctiles.</li> <li>El control de desplazamiento muestra botones para desplazarse por el mapa. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada en dispositivos no t\u00e1ctiles. El control de desplazamiento tambi\u00e9n te permite girar im\u00e1genes de 45\u00ba, si est\u00e1n disponibles.</li> <li>El control de escala muestra un elemento de escala del mapa. Este control est\u00e1 inhabilitado de forma predeterminada.</li> <li>El control MapType permite al usuario alternar entre los diferentes tipos de mapas, como ROADMAP (mapa de carreteras) y SATELLITE (sat\u00e9lite). Este control aparece en la esquina superior derecha del mapa de forma predeterminada.</li> <li>El control de Street View incluye un icono de hombrecito naranja que se puede arrastrar hasta el mapa para habilitar la funci\u00f3n de Street View. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada.</li> <li>El control de giro incluye un icono circular peque\u00f1o que te permite girar mapas que contienen im\u00e1genes oblicuas. Este control aparece en la esquina superior izquierda del mapa de forma predeterminada (para obtener m\u00e1s informaci\u00f3n, consulta la documentaci\u00f3n sobre im\u00e1genes de 45\u00ba).</li> <li>El control de mapa general muestra un mapa general en miniatura que refleja la ventana gr\u00e1fica del mapa actual dentro de una zona m\u00e1s amplia. Este control aparece en la esquina inferior derecha del mapa y se muestra contra\u00eddo de forma predeterminada.</li> </ul> <p>No puedes acceder ni modificar estos controles del mapa directamente, pero puedes modificar los campos MapOptions del mapa que afectan a la visibilidad y a la presentaci\u00f3n de los controles</p> <pre><code>{\n    panControl: booleano,\n    zoomControl: booleano,\n    mapTypeControl: booleano,\n    scaleControl: booleano,\n    streetViewControl: booleano,\n    overviewMapControl: booleano,\n    rotateControl:booleano\n}\n</code></pre>"},{"location":"google/#opciones-de-los-controles","title":"Opciones de los controles","text":""},{"location":"google/#control-maptype","title":"Control MapType","text":"<p>El control MapType puede mostrarse en una de las siguientes opciones style:</p> <ul> <li>google.maps.MapTypeControlStyle.HORIZONTAL_BAR muestra el conjunto de controles como botones situados en una barra horizontal como la que se muestra en Google Maps.</li> <li>google.maps.MapTypeControlStyle.DROPDOWN_MENU muestra un control de un solo bot\u00f3n que permite seleccionar el tipo de mapa a trav\u00e9s de un men\u00fa desplegable.</li> <li>google.maps.MapTypeControlStyle.DEFAULT muestra el control \"predeterminado\", que depende del tama\u00f1o de la pantalla y puede cambiar en futuras versiones del API.</li> </ul> <pre><code>mapTypeControlOptions: {\n    style: google.maps.MapTypeControlStyle.DROPDOWN_MENU\n}\n</code></pre>"},{"location":"google/#como-colocar-los-controles","title":"C\u00f3mo colocar los controles","text":"<p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/control-positioning?hl=es</p>"},{"location":"google/#superposiciones","title":"Superposiciones","text":"<p>Google Maps API incorpora varios tipos de superposiciones</p>"},{"location":"google/#marcadores","title":"Marcadores","text":"<p>Los puntos en el mapa se muestran mediante marcadores. En algunas ocasiones, los marcadores pueden mostrar im\u00e1genes de iconos personalizados, que se denominan normalmente \"iconos\". Los marcadores e iconos son objetos de tipo Marker.</p> <pre><code>const { AdvancedMarkerElement } = await google.maps.importLibrary(\"marker\");\n\nconst myLatLng = { lat: 42, lng: 2};\nconst marker = new AdvancedMarkerElement({\n    position: myLatlng,\n    map:map,\n    title:\"Hello World!\"\n});\n</code></pre> <p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/advanced-markers-simple?hl=es</p>"},{"location":"google/#marcadores-personalizados","title":"Marcadores personalizados","text":"<pre><code>const { AdvancedMarkerElement } = await google.maps.importLibrary(\"marker\");\n\n// A marker with a with a URL pointing to a PNG.\nconst customImg = document.createElement(\"img\");\n\ncustomImg.src = 'http://betaserver.icgc.cat/mapicons/aed-2.png'\n\nnew AdvancedMarkerElement({\n    position: map.getCenter(),\n    content: customImg,\n    map,\n  });\n</code></pre> <p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/advanced-markers-basic-style?hl=es</p> <p>Pod\u00e9is encontrar m\u00e1s \u00edconos de ejemplo en http://betaserver.icgc.cat/mapicons/ o en https://betaserver2.icgc.cat/maki/pin-l-f+ceff00@2x.png</p>"},{"location":"google/#lineas","title":"L\u00edneas","text":"<p>Las l\u00edneas sobre el mapa se muestran mediante polil\u00edneas, que representan una serie ordenada de ubicaciones. Las l\u00edneas son objetos de tipo Polyline.</p> <p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/polyline-simple?hl=es</p>"},{"location":"google/#poligonos","title":"Pol\u00edgonos","text":"<p>Las \u00e1reas del mapa con forma irregular se muestran mediante pol\u00edgonos, que son similares a las polil\u00edneas. Al igual que las polil\u00edneas, los pol\u00edgonos representan una serie ordenada de ubicaciones; la diferencia estriba en que los pol\u00edgonos definen la regi\u00f3n que engloban.</p> <p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/polygon-hole?hl=es</p> <p>Pod\u00e9is ver la documentaci\u00f3n tanto de l\u00edneas como de pol\u00edgonos en https://developers.google.com/maps/documentation/javascript/reference/polygon?hl=es</p>"},{"location":"google/#ventana-de-informacion","title":"Ventana de informaci\u00f3n","text":"<p>La ventana de informaci\u00f3n es tambi\u00e9n un tipo de superposici\u00f3n especial para la visualizaci\u00f3n de contenido (normalmente texto o im\u00e1genes) en un globo emergente que se muestra sobre el mapa en una ubicaci\u00f3n determinada.</p> <p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/infowindow-simple?hl=es</p>"},{"location":"google/#superposiciones-personalizadas","title":"Superposiciones personalizadas","text":"<p>Si quieres, tambi\u00e9n puedes implementar superposiciones personalizadas. Estas superposiciones personalizadas implementan la interfaz OverlayView.</p> <p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/overlay-simple?hl=es</p>"},{"location":"google/#geojson","title":"GeoJSON","text":"<p>Podemos agregar un geojson desde una URL que lo contenga o desde una variable que contenga el GeoJSON </p> <p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/layer-data-style?hl=es</p> <pre><code>const gasolineras = {\n    \"type\": \"FeatureCollection\",\n    \"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\n    \"features\": [\n        { \"type\": \"Feature\", \n            \"properties\": { \n                \"lon\": -16.484670, \n                \"lat\": 28.428720, \n                \"Nombre\": \"REPSOL Horario Especial 0\"}, \n                \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -16.48467, 28.42872 ] } \n        },\n        { \"type\": \"Feature\", \n        \"properties\": { \n            \"lon\": -16.460470, \n            \"lat\": 28.449530, \n            \"Nombre\": \"DISA EL BOHIO L-D: 24H 0\"}, \n            \"geometry\": { \"type\": \"Point\", \"coordinates\": [ -16.46047, 28.44953 ] } \n        } \n    ]\n};\nmap.data.addGeoJson(gasolineras);\n</code></pre>"},{"location":"google/#kml","title":"KML","text":"<p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/layer-kml?hl=es</p>"},{"location":"google/#street-view","title":"Street View","text":"<p>Son vistas panor\u00e1micas de 360 grados de las principales rutas del mundo.</p> <p>Se puede utilizar directamente como control en el mapa: MapOptions: streetViewControl: true o false.</p> <p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/streetview-simple?hl=es</p> <pre><code>const uab = { lat: 41.503317, lng: 2.107957 };\n  const map = new google.maps.Map(document.getElementById(\"map\"), {\n    center: uab,\n    zoom: 14,\n  });\n  const panorama = new google.maps.StreetViewPanorama(\n    document.getElementById(\"pano\"),\n    {\n      position: uab,\n      pov: {\n        heading: 270,\n        pitch: 10\n      },\n    }\n  );\n  map.setStreetView(panorama);\n</code></pre>"},{"location":"google/#routing","title":"Routing","text":"<p>Google dispone de un servicio de c\u00e1lculo de rutas denominado DirectionsService. Tambi\u00e9n dispone de un servicio de visualizaci\u00f3n de rutas denominado DirectionsRenderer.</p> <p>La petici\u00f3n de una ruta requiere de los siguientes par\u00e1metros. <pre><code>{\n  origin: LatLng | String | google.maps.Place,\n  destination: LatLng | String | google.maps.Place,\n  travelMode: TravelMode,\n  transitOptions: TransitOptions,\n  drivingOptions: DrivingOptions,\n  unitSystem: UnitSystem,\n  waypoints[]: DirectionsWaypoint,\n  optimizeWaypoints: Boolean,\n  provideRouteAlternatives: Boolean,\n  avoidHighways: Boolean,\n  avoidTolls: Boolean,\n  region: String\n}\n</code></pre></p> <ul> <li>origin: Origen de la ruta en (LatLng | String | google.maps.Place)</li> <li>destination: Destino de la ruta en (LatLng | String | google.maps.Place)</li> <li>travelMode: Modo de viaje <ul> <li>DRIVING: Opci\u00f3n por defecto (Coche)</li> <li>TRANSIT: Transporte p\u00fablico</li> <li>BICYCLING: Bicicleta</li> <li>WALKING: Caminando</li> </ul> </li> <li>transitOptions: {   arrivalTime: Fecha,   departureTime: Fecha,   modes[]: (BUS,RAIL,SUBWAY,TRAIN,TRAM)   routingPreference: (FEWER_TRANSFERS, LESS_WALKING) }</li> <li>drivingOptions:{   departureTime: Fecha,   trafficModel: (BEST_GUESS, OPTIMISTIC, PESSIMISTIC) },</li> <li>unitSystem: Unidadaes,</li> <li>waypoints[]: Puntos intermedios,</li> <li>optimizeWaypoints: Optimizar puntos intermedios (booleano),</li> <li>provideRouteAlternatives: Mostrar rutes alternatives (booleano),</li> <li>avoidHighways: Evitar autopistes (booleano),</li> <li>avoidTolls: Evitar peajes (booleano),</li> <li>region: Regi\u00f3n donde se calcula la ruta</li> </ul> <p>Ejemplo: https://developers.google.com/maps/documentation/javascript/examples/directions-simple?hl=es</p>"},{"location":"google/#ejemplos","title":"Ejemplos","text":"<p>Pod\u00e9is ver m\u00e1s ejemplos de c\u00f3digo en https://developers.google.com/maps/documentation/javascript/examples/</p> <p>Ejercicio 2 pts</p> <ol> <li>Crear un mapa con la API de google maps. Iniciar el mapa centrado en Catalunya (0.5 pt)</li> <li>El mapa debe tener el fondo Hibrido activado por defecto (0.5 pt)</li> <li>Agregar un formulario para crear una ruta. (0.5 pt)</li> <li>Las ciudades de origen deben ser: Barcelona, Terrassa, Sabadell, Cerdanyola y Manresa.   Los destino deben ser: Facultad de Letras de la UAB y el Parque del Tibidabo</li> <li>Los medios de transporte debes ser: Conduciendo, Caminando, Bicicleta, Transporte p\u00fablico.</li> <li>Bot\u00f3n para calcular la ruta.</li> <li>Mostrar la distancia de la ruta (en Km) y el tiempo de recorrido (en la unidad m\u00e1s adecuada, minutos u horas) (0.5 pt)</li> </ol> <p> Ejemplo ejercicio</p>"},{"location":"google/#referencias","title":"Referencias","text":"<p>https://developers.google.com/maps/documentation/javascript/reference/?hl=es</p>"},{"location":"leaflet/","title":"Leaflet","text":"<p>https://leafletjs.com/</p>"},{"location":"leaflet/#pantalla-completa","title":"Pantalla completa","text":"<p>https://leafletjs.com/examples/mobile/</p>"},{"location":"leaflet/#wms","title":"WMS","text":"<p>https://leafletjs.com/examples/wms/wms.html</p>"},{"location":"leaflet/#markers","title":"Markers","text":"<p>https://leafletjs.com/examples/custom-icons/</p>"},{"location":"leaflet/#geojson","title":"Geojson","text":"<p>https://leafletjs.com/examples/geojson/</p>"},{"location":"leaflet/#tematicos","title":"Tematicos","text":"<p>https://leafletjs.com/examples/choropleth/</p>"},{"location":"leaflet/#filtro","title":"Filtro","text":"<p>https://leafletjs.com/reference-1.7.1.html#geojson-filter</p>"},{"location":"leaflet/#layer-control","title":"Layer control","text":"<p>https://leafletjs.com/examples/layers-control/</p>"},{"location":"leaflet/#hash","title":"Hash","text":"<p>https://github.com/mlevans/leaflet-hash</p> <pre><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet-hash/0.2.1/leaflet-hash.min.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"leaflet/#eventos","title":"Eventos","text":"<p>https://leafletjs.com/reference-1.7.1.html#event-objects</p> <pre><code>var popup = L.popup();\n\nfunction onMapClick(e) {\n    popup\n        .setLatLng(e.latlng) // Sets the geographical point where the popup will open.\n        .setContent(\"Has hecho click en la coordenada:&lt;br&gt; \" +  e.latlng.lat.toString() + \",\" +  e.latlng.lng.toString()) // Sets the HTML content of the popup.\n        .openOn(map); // Adds the popup to the map and closes the previous one. \n}\n\nmap.on('click', onMapClick);\n</code></pre>"},{"location":"leaflet/#crear-un-control","title":"Crear un control","text":"<p>https://leafletjs.com/examples/extending/extending-3-controls.html</p>"},{"location":"leaflet/#easybutton","title":"EasyButton","text":"<p>https://github.com/CliffCloud/Leaflet.EasyButton</p> <pre><code>&lt;link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Leaflet.EasyButton/2.4.0/easy-button.min.css\" crossorigin=\"anonymous\" /&gt;\n\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/Leaflet.EasyButton/2.4.0/easy-button.min.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"leaflet/#context-menu","title":"Context menu","text":"<p>https://github.com/aratcliffe/Leaflet.contextmenu</p>"},{"location":"leaflet/#barra-de-edicion","title":"Barra de edici\u00f3n","text":"<p>https://leaflet.github.io/Leaflet.draw/docs/leaflet-draw-latest.html</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css\" crossorigin=\"anonymous\" /&gt;\n\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre> <pre><code>// FeatureGroup is to store editable layers\nconst drawnItems = new L.FeatureGroup();\nmap.addLayer(drawnItems);\nconst drawControl = new L.Control.Draw({\n    edit: {\n        featureGroup: drawnItems\n    }\n});\nmap.addControl(drawControl);\n\nmap.on(L.Draw.Event.CREATED, function (e) {\n    console.log(e);\n    const type = e.layerType,\n        layer = e.layer;\n    if (type === 'marker') {\n        // Do marker specific actions\n    }\n    // Do whatever else you need to. (save to db; add to map etc)\n    drawnItems.addLayer(layer);\n    console.log(layer.toGeoJSON());\n});\n\nmap.on('draw:edited', function (e) {\n    const layers = e.layers;\n    console.log(layers);   \n    layers.eachLayer(function (layer) {\n        //do whatever you want; most likely save back to db\n    });\n});\n</code></pre>"},{"location":"leaflet/#editable","title":"Editable","text":"<p>https://github.com/Leaflet/Leaflet.Editable</p> <pre><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet-editable/1.2.0/Leaflet.Editable.min.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"leaflet/#barra-lateral","title":"Barra lateral","text":"<p>https://github.com/turbo87/sidebar-v2/</p> <pre><code>&lt;link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css\" rel=\"stylesheet\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/sidebar-v2@0.4.0/css/leaflet-sidebar.css\"&gt;\n\n&lt;script src=\"https://cdn.jsdelivr.net/npm/sidebar-v2@0.4.0/js/leaflet-sidebar.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"leaflet/#mapas-silmultaneos","title":"Mapas silmultaneos","text":"<p>https://github.com/digidem/leaflet-side-by-side</p> <p>https://gist.github.com/sigdeletras/8e14a1599d0ba5393d668c808f2b8061</p> <pre><code>&lt;script src=\"http://lab.digital-democracy.org/leaflet-side-by-side/leaflet-side-by-side.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Ejercicio 4 pts</p> <p>Crear un archivo llamado ejercicios_leaflet.html y en este archivo crear un mapa de leaflet que contenga lo siguiente</p> <ol> <li>La capa base que sea el wms de topogris del ICGC. (0.5 pt)</li> <li>Cargar la capa Pob20k geojson de https://raw.githubusercontent.com/geostarters/dades/master/Pob20k.geojson (0.5 pt)</li> <li>Sobre la capa Pob20k hacer un tem\u00e1tico (el campo para hacer el tem\u00e1tico es libre) (0.5 pt)</li> <li>Cargar la capa Refugis geojson de https://raw.githubusercontent.com/geostarters/dades/master/refugis.geojson (0.5 pt)</li> <li>Aplicar un filtro a la Capa Refugis donde solo se muestren los refugios con una Cota superior a 2000 (0.5 pt)</li> <li>Agregar un icono personalizado a la capa de Refugis (0.5 pt)</li> <li>Al hacer click sobre un Refugio que se muestre la informaci\u00f3n del refugio: Nombre, Cota y Tipo (0.5 pt)</li> <li>Agregar un nuevo bot\u00f3n al mapa que haga zoom sobre el Pedraforca (0.5 pt)</li> </ol>"},{"location":"maplibre/","title":"MapLibre GL JS (Mapbox GL)","text":"<p>MapLibre GL JS es una librer\u00eda de JavaScript que utiliza WebGL para representar mapas interactivos a partir de mosaicos vectoriales y estilos MapLibre. Es parte del ecosistema MapLibre GL. <sup>1</sup></p> <p>Warning</p> <p>En diciembre de 2020 Mapbox lanza la versi\u00f3n 2 de la librer\u00eda y cambia la licencia y las condiciones de uso (Ahora es necesario tener un token de Mapbox para que funcione). Hasta la versi\u00f3n 1.13 la librer\u00eda tiene una licencia BSD y se puede usar sin un token de Mapbox </p> <p>Debido al cambio de licencia parte de la comunidad lanza MapLibre GL JS <sup>2</sup> que es un fork de Mapbox GL JS en su versi\u00f3n 1.13</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Maplibre&lt;/title&gt;\n    &lt;link href='https://unpkg.com/maplibre-gl/dist/maplibre-gl.css' rel='stylesheet' /&gt;\n    &lt;script src='https://unpkg.com/maplibre-gl/dist/maplibre-gl.js'&gt;&lt;/script&gt;\n    &lt;style&gt;\n        #map {\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            width: 100%;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"map\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        const map = new maplibregl.Map({\n            container: 'map',\n            style: 'https://geoserveis.icgc.cat/contextmaps/icgc.json',                \n            center: [2.16859, 41.3954],\n            zoom: 13,\n            maxZoom: 14,\n            hash: true,\n            pitch: 45\n        });\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"maplibre/#estilo","title":"Estilo","text":"<p>Un estilo Mapbox es un documento que define la apariencia visual de un mapa: qu\u00e9 datos dibujar, el orden para dibujarlos y c\u00f3mo dise\u00f1ar los datos al dibujarlos. Un documento de estilo es un objeto JSON con un nivel de ra\u00edz espec\u00edfico y propiedades anidadas. Esta especificaci\u00f3n define y describe estas propiedades. <sup>3</sup></p> <p>Note</p> <p>Al declarar un mapa no es necesario declarar el estilo</p>"},{"location":"maplibre/#raiz-elementos-del-primer-nivel","title":"Ra\u00edz (elementos del primer nivel)","text":"<p>Las propiedades de nivel ra\u00edz de un estilo Mapbox especifican las capas del mapa, las fuentes de datos y otros recursos, como por ejemplo los valores predeterminados para la posici\u00f3n inicial de la c\u00e1mara.</p> <p>Ejemplo</p> <pre><code>{\n    \"version\": 8,\n    \"name\": \"NOMBRE_DEL_ESTILO\",\n    \"sprite\": \"URL_DEL_SPRITE\",\n    \"glyphs\": \"URL_DE_LAS_FUENTES/{fontstack}/{range}.pbf\",\n    \"sources\": {...},\n    \"layers\": [...]\n}\n</code></pre>"},{"location":"maplibre/#sprite-iconos","title":"Sprite (iconos)","text":"<p>Un sprite es una imagen \u00fanica que contiene todos los iconos incluidos en un estilo. Al combinar muchas im\u00e1genes peque\u00f1as en una sola imagen (el objeto), puede reducir la cantidad de solicitudes necesarias para obtener todas las im\u00e1genes, lo que mejora el rendimiento y hace que su mapa se cargue m\u00e1s r\u00e1pidamente.<sup>4</sup></p> <p>Una URL base para recuperar la imagen y los metadatos del sprite. Las extensiones .png, .json y el factor de escala @ 2x.png se agregar\u00e1n autom\u00e1ticamente. Esta propiedad es necesaria si alguna capa utiliza las propiedades patr\u00f3n de fondo, patr\u00f3n de relleno, patr\u00f3n de l\u00ednea, patr\u00f3n de extrusi\u00f3n de relleno o imagen de icono. La URL debe ser absoluta</p> <pre><code>\"sprite\": \"https://geoserveis.icgc.cat/contextmaps/sprites/sprite@1\",\n</code></pre> <p>https://geoserveis.icgc.cat/contextmaps/sprites/sprite@1.png https://geoserveis.icgc.cat/contextmaps/sprites/sprite@1.json</p>"},{"location":"maplibre/#glyphs-tipografias","title":"Glyphs (tipograf\u00edas)","text":"<p>En tipograf\u00eda, un glifo es una representaci\u00f3n gr\u00e1fica de un car\u00e1cter.</p> <p>La propiedad de glifos de un estilo proporciona una plantilla de URL para cargar conjuntos de glifos de campos de distancia firmados en formato PBF.</p> <pre><code>  \"glyphs\": \"https://geoserveis.icgc.cat/contextmaps/glyphs/{fontstack}/{range}.pbf\",\n</code></pre>"},{"location":"maplibre/#sources","title":"Sources","text":"<p>Objeto que define los or\u00edgenes de los datos.</p> <p>Una fuente (source) indica qu\u00e9 datos debe mostrar el mapa. Se debe especifique el tipo de fuente con la propiedad \"type\". Lo tipos de fuentes deben ser: vector, raster, raster-dem, geojson, image, video.</p> <p>https://maplibre.org/maplibre-gl-js-docs/style-spec/sources/</p> <p>Ejemplo </p> <pre><code>\"sources\": {\n    \"openmaptiles\": {\n      \"type\": \"vector\",\n      \"tiles\": [\"https://geoserveis.icgc.cat/data/planet/{z}/{x}/{y}.pbf\"]\n    },\n    \"ortoICGC\": {\n      \"type\": \"raster\",\n      \"tiles\": [\n        \"https://geoserveis.icgc.cat/icc_mapesmultibase/noutm/wmts/orto/GRID3857/{z}/{x}/{y}.jpeg\"\n      ],\n      \"tileSize\": 256,\n      \"minzoom\": 13.1,\n      \"maxzoom\": 20\n    }\n}\n</code></pre>"},{"location":"maplibre/#layers","title":"Layers","text":"<p>Matriz que contiene las reglas de simbolizaci\u00f3n. El orden dentro de la matriz es importante ya que la forma en que se van dibujando, hace que la primera regla quede por debajo del todo y la \u00faltima regla quede por encima del todo. De esta manera, la primera regla suele ser el color de fondo del mapa, y las \u00faltimas suelen ser la toponimia o los PoIs. El tipo de capa se especifica mediante la propiedad \"type\" y debe ser de fbackground, fill, line, symbol, raster, circle, fill-extrusion, heatmap, hillshade, sky.</p> <p>https://maplibre.org/maplibre-gl-js-docs/style-spec/layers/</p> <p>Ejemplo</p> <pre><code>\"layers\": [\n    {\n      \"id\": \"background\",\n      \"type\": \"background\",\n      \"paint\": {\n        \"background-color\": \"#F4F9F4\"\n      }\n    },\n    {\n      \"id\": \"ortoICGC\",\n      \"type\": \"raster\",\n      \"source\": \"ortoICGC\",\n      \"minzoom\": 13.1,\n      \"maxzoom\": 19,\n      \"layout\": {\n        \"visibility\": \"visible\"\n      }\n    },\n    {\n      \"id\": \"park-outline\",\n      \"type\": \"line\",\n      \"source\": \"openmaptiles\",\n      \"source-layer\": \"park\",\n      \"filter\": [\n        \"==\",\n        \"$type\",\n        \"Polygon\"\n      ],\n      \"layout\": {},\n      \"paint\": {\n        \"line-color\": {\n          \"base\": 1,\n          \"stops\": [\n            [\n              6,\n              \"hsla(96, 40%, 49%, 0.36)\"\n            ],\n            [\n              8,\n              \"hsla(96, 40%, 49%, 0.66)\"\n            ]\n          ]\n        },\n        \"line-dasharray\": [\n          3,\n          3\n        ]\n      }\n    },\n    {\n      \"id\": \"landcover-grass-park\",\n      \"type\": \"fill\",\n      \"source\": \"openmaptiles\",\n      \"source-layer\": \"park\",\n      \"filter\": [\n        \"==\",\n        \"class\",\n        \"public_park\"\n      ],\n      \"paint\": {\n        \"fill-color\": \"#d8e8c8\",\n        \"fill-opacity\": 0.8\n      }\n    },\n    ...\n</code></pre>"},{"location":"maplibre/#otras-propiedades","title":"Otras propiedades","text":"<p>Habitualmente tambi\u00e9n se usan otras propiedades para indicar la vista inicial del mapa. Por ejemplo:</p> <pre><code>{\n  ...\n  \"center\": [2.15, 41.39],\n  \"zoom\": 12,\n  \"bearing\": -45,\n  \"pitch\": 0\n}\n</code></pre>"},{"location":"maplibre/#sources_1","title":"Sources","text":"<p>Ya vimos como agregar fuentes de datos en el estilo pero tambi\u00e9n podemos agregar fuentes de datos al mapa luego de cargar el estilo inicial del mapa.</p> <p>Para agregar un estilo al mapa se usa el m\u00e9todo addSource. </p> <p>Sintaxis</p> <pre><code>map.addSource(\"ID_DE_LA_FUENTE\", opciones);\n</code></pre> <p>Ejemplo</p> <pre><code>map.addSource('muncat', {\n    type: 'geojson',\n    data: 'https://raw.githubusercontent.com/geostarters/dades/master/Municipis_Catalunya_EPSG4326.geojson'\n});\n</code></pre> <p>Note</p> <p>Si el mapa tiene un estilo ya cargado las fuentes y las capas se deben cargar luego del el evento load del mapa que solo se llama la primera vez que se carga el mapa <pre><code>map.on('load', function() {\n    // the rest of the code will go in here\n    map.addSource('muncat', {\n        type: 'geojson',\n        data: 'https://raw.githubusercontent.com/geostarters/dades/master/Municipis_Catalunya_EPSG4326.geojson'\n    });\n});\n</code></pre></p>"},{"location":"maplibre/#layers_1","title":"Layers","text":"<p>Al igual que las fuentes de datos podemos agregar capas al mapa una vez cargado el estilo inicial del mapa. Para ellos usaremos el m\u00e9todo addLayer</p> <p>Sintaxis</p> <pre><code>map.addLayer(opciones);\n</code></pre> <p>Ejemplo</p> <pre><code>map.addLayer({\n    'id': 'municipis',\n    'type': 'fill',\n    'source': 'muncat',\n    'paint': {\n    'fill-color': '#888888',\n    'fill-opacity': 0.4\n    },\n    'filter': ['==', '$type', 'Polygon']\n});\n</code></pre> <p>Las capas tienen dos subpropiedades que determinan c\u00f3mo se procesan los datos de esa capa: propiedades de dise\u00f1o y pintura.</p> <p>Layout properties: Las propiedades de dise\u00f1o aparecen en el objeto \"layout\" de la capa. Se aplican al principio del proceso de renderizado y definen c\u00f3mo se pasan los datos de esa capa a la GPU. Los cambios en una propiedad de dise\u00f1o requieren un paso de \"dise\u00f1o\" asincr\u00f3nico.</p> <p>Paint properties: Las propiedades de la pintura se aplican m\u00e1s adelante en el proceso de renderizado. Las propiedades de pintura aparecen en el objeto \"paint\" de la capa. Los cambios en una propiedad de pintura son baratos y ocurren de forma sincr\u00f3nica.</p>"},{"location":"maplibre/#tematicos","title":"Tem\u00e1ticos","text":"<p>Se puede definir el valor de cualquier propiedad de dise\u00f1o, propiedad de pintura o filtro como una expresi\u00f3n.</p> <p>Una expresi\u00f3n define una f\u00f3rmula para calcular el valor de la propiedad utilizando los operadores que se describen a continuaci\u00f3n.</p> <p>Los operadores de expresi\u00f3n proporcionados por Mapbox GL incluyen:</p> <ul> <li>Operadores matem\u00e1ticos para realizar operaciones aritm\u00e9ticas y otras operaciones con valores num\u00e9ricos</li> <li>Operadores l\u00f3gicos para manipular valores booleanos y tomar decisiones condicionales</li> <li>Operadores de cadenas para manipular cadenas</li> <li>Operadores de datos para proporcionar acceso a las propiedades de las caracter\u00edsticas de origen</li> <li>Operadores de c\u00e1mara para proporcionar acceso a los par\u00e1metros que definen la vista del mapa actual</li> </ul> <p>Las expresiones se representan como matrices JSON. El primer elemento de una matriz de expresi\u00f3n es una cadena que nombra al operador de expresi\u00f3n, por ejemplo, \"*\" o \"caso\". Los elementos que siguen (si los hay) son los argumentos de la expresi\u00f3n. Cada argumento es un valor literal (una cadena, un n\u00famero, booleano o nulo) u otra matriz de expresi\u00f3n.</p> <pre><code>[expression_name, argument_0, argument_1, ...]\n</code></pre> <p>https://maplibre.org/maplibre-gl-js-docs/style-spec/expressions/</p> <p>Ejemplo</p> <pre><code>map.addLayer({\n    'id': 'municipis',\n    'type': 'fill',\n    'source': 'muncat',\n    'paint': {\n    'fill-color': [\n        'match',\n        ['get', 'provincia'],\n        '25',\n        '#ff0000',\n        '17',\n        '#00ff00',\n        '08',\n        '#0000ff',\n        '43',\n        '#ff00ff',\n        '#ccc'\n    ],\n    'fill-opacity': 0.4\n    },\n    'filter': ['==', '$type', 'Polygon']\n});\n</code></pre>"},{"location":"maplibre/#filtros","title":"Filtros","text":"<p>Una expresi\u00f3n que especifica las condiciones de los features. Solo se muestran las features que coinciden con el filtro. Las expresiones de zoom en los filtros solo se eval\u00faan en niveles de zoom enteros</p> <p>Ejemplo</p> <pre><code>map.addLayer({\n    'id': 'municipis',\n    'type': 'fill',\n    'source': 'muncat',\n    'paint': {\n    'fill-color': [\n        'match',\n        ['get', 'provincia'],\n        '25',\n        '#ff0000',\n        '17',\n        '#00ff00',\n        '08',\n        '#0000ff',\n        '43',\n        '#ff00ff',\n        '#ccc'\n    ],\n    'fill-opacity': 0.4\n    },\n    'filter': [\n        'all',\n        ['==', '$type', 'Polygon'],\n        ['==', ['get', 'provincia'], 25]\n    ]\n});\n</code></pre> <p>Otro ejemplo</p> <pre><code>'filter': [\n    'all',\n    ['==', '$type', 'Polygon'],\n    ['in', 'provincia', '25', '17'],\n]\n</code></pre>"},{"location":"maplibre/#cambiar-estilo-de-elementos-en-el-cliente","title":"Cambiar estilo de elementos en el cliente","text":"<p>Para cambiar el estilo o la visualizaci\u00f3n de un elemento podemos usar los m\u00e9todos setPaintProperty o setLayoutProperty dependiendo de que propiedad queremos actualizar.</p> <p>La sintaxis es igual para los dos casos</p> <pre><code>map.setPaintProperty('LAYER_ID', 'NOMBRE_DE_LA_PROPIEDAD', 'VALOR');\n\nmap.setLayoutProperty('LAYER_ID', 'NOMBRE_DE_LA_PROPIEDAD', 'VALOR');\n</code></pre> <p>Ejemplo</p> <pre><code>map.setPaintProperty('my-layer', 'fill-color', '#faafee');\n\nmap.setLayoutProperty('my-layer', 'visibility', 'none');\n</code></pre> <pre><code>&lt;div&gt;\n    &lt;input type=\"color\" id=\"water-color\"&gt;\n    &lt;label for='water-color'&gt;Color del agua&lt;/label&gt;\n&lt;/div&gt;\n&lt;div&gt;\n    &lt;input type=\"checkbox\" id=\"edificios\" checked&gt;\n    &lt;label for='edificios'&gt;Edificios&lt;/label&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>function cambiaColorAgua(evt) {\n    const color = evt.target.value;\n    console.log(color);\n    map.setPaintProperty('water-copy', 'fill-color', color);\n}\n\nfunction muestraEdificios(evt) {\n    const isChecked = evt.target.checked;\n    if(isChecked){\n        map.setLayoutProperty('building-copy', 'visibility', 'visible');\n    }else{\n        map.setLayoutProperty('building-copy', 'visibility', 'none');\n    }\n}\n\ndocument.getElementById(\"water-color\").addEventListener(\"change\", cambiaColorAgua, false);\ndocument.getElementById(\"water-color\").addEventListener(\"input\", cambiaColorAgua, false);\ndocument.getElementById(\"edificios\").addEventListener(\"change\", muestraEdificios, false);\n</code></pre>"},{"location":"maplibre/#cambiar-estilo-mantener-datos","title":"Cambiar estilo mantener datos","text":"<p>En Mapbox GL no hay el concepto de capas Base y de capas overlay, por el contrario todo pertenece al estilo. </p> <p>Cuando agregamos una capa al mapa la estamos agregando al estilo por lo tanto si cambiamos de estilo perderemos todas capas que hemos agregado al estilo.</p> <p>Ejemplo</p> <pre><code>&lt;style&gt;\n    #menu {\n        position: absolute;\n        z-index: 1000;\n        background: #fff;\n        padding: 10px;\n        font-family: 'Open Sans', sans-serif;\n        top: 5px;\n        left: 5px;\n        border-radius: 7px;\n        -webkit-box-shadow: 5px 5px 5px -5px rgba(0, 0, 0, 0.75);\n        -moz-box-shadow: 5px 5px 5px -5px rgba(0, 0, 0, 0.75);\n        box-shadow: 5px 5px 5px -5px rgba(0, 0, 0, 0.75);\n    }\n&lt;/style&gt;\n\n\n&lt;div id='menu'&gt;\n    &lt;input id='icgc' type='radio' name='rtoggle' value='icgc' checked='checked'&gt;\n    &lt;label for='icgc'&gt;icgc&lt;/label&gt;\n    &lt;input id='fulldark' type='radio' name='rtoggle' value='fulldark'&gt;\n    &lt;label for='fulldark'&gt;fulldark&lt;/label&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>document.getElementsByName('rtoggle').forEach((elem) =&gt; {\n    elem.addEventListener(\"change\", function(event) {\n        const item = event.target.value;\n        switchLayer(item);\n    });\n})\n\nfunction switchLayer(layer) {\n    map.setStyle('https://geoserveis.icgc.cat/contextmaps/' + layer + '.json');\n}\n</code></pre> <p>Ahora si cambiamos de estilo vemos que hemos perdido la capa de los municipios. Para evitar esto podemos usar el evento styledata (que se lanzaz cuando el estilo del mapa se carga o cambia) en lugar del evento load. Debido a que la carga del estilo es asyncrona debemos esperar a que el estilo del mapa est\u00e9 cargado por completo (map.isStyleLoaded()) para luego cargar nuestras capas.</p> <pre><code>map.on('styledata', () =&gt; {\n    const waiting = () =&gt; {\n        if (!map.isStyleLoaded()) {\n            setTimeout(waiting, 200);\n        } else {\n            cargarDatos();\n        }\n    };\n    waiting();\n});\n\nfunction cargarDatos() {\n\n    //comprobamos que el source no existe para evitar cargar un mismo source 2 veces que da un mensaje de error\n    if (!map.getSource('muncat')) {\n\n        map.addSource('muncat', {\n            type: 'geojson',\n            data: 'https://raw.githubusercontent.com/geostarters/dades/master/Municipis_Catalunya_EPSG4326.geojson'\n        });\n\n    }\n\n    //la misma comprobaci\u00f3n para las capas\n    if (!map.getLayer('municipis')) {\n        map.addLayer({\n            'id': 'municipis',\n            'type': 'fill',\n            'source': 'muncat',\n            'paint': {\n            'fill-color': [\n                'match',\n                ['get', 'provincia'],\n                '25',\n                '#ff0000',\n                '17',\n                '#00ff00',\n                '08',\n                '#0000ff',\n                '43',\n                '#ff00ff',\n                '#ccc'\n            ],\n            'fill-opacity': 0.4\n            },\n            'filter': [\n                'all',\n                ['==', '$type', 'Polygon'],\n                ['in', 'provincia', '25', '17'],\n            ]\n        });\n    }\n\n}\n</code></pre>"},{"location":"maplibre/#eventos","title":"Eventos","text":""},{"location":"maplibre/#click","title":"click","text":"<p>Opcionalmente se puede indicar el id de la capa en la que se quiere capturar el evento. Si no se especifica es en todo el mapa.</p> <pre><code>map.on('click', 'municipis', function (e) {\n    new maplibregl.Popup()\n    .setLngLat(e.lngLat)\n    .setHTML(e.features[0].properties.nomn_muni)\n    .addTo(map);\n});\n</code></pre>"},{"location":"maplibre/#mouseenter-mouseleave","title":"mouseenter &amp; mouseleave","text":"<p>En este caso siempre se debe especificar el id de la capa.</p> <pre><code>// Change the cursor to a pointer when the mouse is over the layer.\nmap.on('mouseenter', 'municipis', function () {\n    map.getCanvas().style.cursor = 'pointer';\n});\n\n// Change it back to a pointer when it leaves.\nmap.on('mouseleave', 'municipis', function () {\n    map.getCanvas().style.cursor = '';\n});\n</code></pre>"},{"location":"maplibre/#mousemove","title":"mousemove","text":"<p>Opcionalmente se puede indicar el id de la capa en la que se quiere capturar el evento. Si no se especifica es en todo el mapa.</p> <pre><code>&lt;style&gt;\n    #features {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        width: 50%;\n        overflow: auto;\n        background: rgba(255, 255, 255, 0.8);\n    }\n&lt;/style&gt;\n\n&lt;pre id=\"features\"&gt;&lt;/pre&gt;\n</code></pre> <pre><code>map.on('mousemove', function (e) {\n    const features = map.queryRenderedFeatures(e.point);\n\n    // Limit the number of properties we're displaying for\n    // legibility and performance\n    const displayProperties = [\n    'type',\n    'properties',\n    'id',\n    'layer',\n    'source',\n    'sourceLayer',\n    'state'\n    ];\n\n    const displayFeatures = features.map(function (feat) {\n        const displayFeat = {};\n        displayProperties.forEach(function (prop) {\n            displayFeat[prop] = feat[prop];\n        });\n        return displayFeat;\n    });\n\n    document.getElementById('features').innerHTML = JSON.stringify(\n        displayFeatures,\n        null,\n        2\n    );\n});\n</code></pre> <p>Resaltar los municipios de la misma comarca</p> <pre><code>map.addLayer({\n    'id': 'municipis-highlighted',\n    'type': 'fill',\n    'source': 'muncat',\n    'paint': {\n        'fill-outline-color': '#484896',\n        'fill-color': '#6e599f',\n        'fill-opacity': 0.75\n    },\n    // Display none by adding a\n    // filter with an empty string.\n    'filter': ['in', 'comarca', '']\n});\n\nmap.on('mousemove', 'municipis', function (e) {\n    // Use the first found feature.\n    const feature = e.features[0];\n\n    // Query the counties layer visible in the map.\n    // Use filter to collect only results\n    // with the same county name.\n    const relatedFeatures = map.querySourceFeatures('muncat', {\n        sourceLayer: 'municipis',\n        filter: ['in', 'comarca', feature.properties.comarca]\n    });\n\n    console.log(relatedFeatures);\n\n    // Add features with the same comarca\n    // to the highlighted layer.\n    map.setFilter('municipis-highlighted', [\n        'in',\n        'comarca',\n        feature.properties.comarca\n    ]);\n\n});\n\nmap.on('mouseleave', 'municipis', function () {\n    map.setFilter('municipis-highlighted', ['in', 'comarca', '']);\n});\n</code></pre> <p>Ejercicio 2.5 pts</p> <ol> <li>Preparar un mapa interactivo de coropletas. Replicar el resultado final de este tutorial de Leaflet https://leafletjs.com/examples/choropleth/ pero usando MapLibre. (2.5 pt)</li> </ol>"},{"location":"maplibre/#mas-recursos","title":"M\u00e1s recursos","text":"<p>Tutorial r\u00e1pido: https://geoinquiets.github.io/vt-hackato-atm/</p> <p>Tutorial m\u00e1s completo: https://geoinquiets.github.io/taller-vt/</p>"},{"location":"maplibre/#referencias","title":"Referencias","text":"<ol> <li> <p>https://maplibre.org/maplibre-gl-js-docs/api/ \u21a9</p> </li> <li> <p>https://maplibre.org/maplibre-gl-js-docs/api/ \u21a9</p> </li> <li> <p>https://maplibre.org/maplibre-gl-js-docs/style-spec/ \u21a9</p> </li> <li> <p>https://docs.mapbox.com/help/glossary/sprite/ \u21a9</p> </li> </ol>"},{"location":"openLayers/","title":"OpenLayers","text":"<p>OpenLayers facilita la creaci\u00f3n de un mapas din\u00e1micos en cualquier p\u00e1gina web. Puede mostrar mosaicos de mapas, datos vectoriales y marcadores cargados desde cualquier fuente. OpenLayers se ha desarrollado para promover el uso de informaci\u00f3n geogr\u00e1fica de todo tipo. Es JavaScript de c\u00f3digo abierto completamente gratuito, publicado bajo la licencia BSD de 2 cl\u00e1usulas (tambi\u00e9n conocida como FreeBSD). <sup>1</sup></p> <p>Es una librer\u00eda JavaScript orientada a objetos. Usar la librer\u00eda implica crear objetos de las clases que proporciona e interactuar con ellos. Es necesario conocer los objetos principales y acudir a los manuales de referencia <sup>2</sup></p>"},{"location":"openLayers/#mi-primer-mapa","title":"Mi primer mapa","text":"<p>Crear un archivo llamado openlayers.html y copiar lo siguiente:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n  &lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/ol@8.2.0/ol.min.css\" type=\"text/css\"&gt;\n    &lt;style&gt;\n      .map {\n        height: 600px;\n        width: 100%;\n      }\n    &lt;/style&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/ol@8.2.0/dist/ol.min.js\"&gt;&lt;/script&gt;\n    &lt;title&gt;Ejemplo OpenLayers&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h2&gt;Mi primer mapa&lt;/h2&gt;\n    &lt;div id=\"map\" class=\"map\"&gt;&lt;/div&gt;\n    &lt;script type=\"text/javascript\"&gt;\n      const map = new ol.Map({\n        target: 'map',\n        layers: [\n          new ol.layer.Tile({\n            source: new ol.source.OSM()\n          })\n        ],\n        view: new ol.View({\n          center: ol.proj.fromLonLat([1.5, 45.1]),\n          zoom: 9\n        })\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Resumen de pasos</p> <ol> <li>Incluir las librer\u00edas de OpenLayers</li> <li>Crear un contenedor DIV donde dibujar el mapa</li> <li>Declarar una variable global a la que asignar el mapa</li> <li>Definir una funci\u00f3n de inicializaci\u00f3n del mapa<ol> <li>Crear un mapa (objeto ol.Map)</li> <li>Crear capas (objeto ol.Layer)</li> <li>A\u00f1adir capas al mapa</li> <li>Posicionar la vista del mapa</li> </ol> </li> </ol>"},{"location":"openLayers/#principales-objetos","title":"Principales objetos","text":""},{"location":"openLayers/#el-mapa-y-la-vista","title":"El mapa y la vista","text":"<p>ol/Map es la clase principal de OpenLayers ya que define el mapa. Se representa en un contenedor de destino terget (por ejemplo, un elemento div en la p\u00e1gina web que contiene el mapa). Todas las propiedades del mapa se pueden configurar en el momento de la construcci\u00f3n o mediante m\u00e9todos de establecimiento, por Ej. setTarget(). </p> <p>Para crear un mapa </p> <pre><code>const map = new ol.Map(options); \n</code></pre> <p>options son las opciones de configuraci\u00f3n del mapa en forma de pares de claves y valores separados por comas. Por ejemplo</p> <pre><code>{\n  view: new View({\n    center: [0, 0],\n    zoom: 1\n  }),\n  layers: [\n    new TileLayer({\n      source: new OSM()\n    })\n  ],\n  target: 'map'\n}\n</code></pre> <p>ol/View representa una vista simple 2D del mapa. El mapa no es responsable de cosas como el centro, el nivel de zoom y la proyecci\u00f3n del mapa. En cambio, estas son propiedades de una instancia ol/View. </p> <p>Para crear una vista</p> <pre><code>const view = new ol.View(options); \n</code></pre> <p>Donde options son las opciones de la vista. Las opciones principales son:</p> <ul> <li>center: coordenadas iniciales del centro de la vista </li> <li>zoom: nivel de zoom inicial</li> <li>maxZoom: m\u00e1ximo nivel de zoom.</li> <li>minZoom: m\u00ednimo nivel de zoom.</li> <li>projection: sistema de referencia de la proyecci\u00f3n del mapa. Por defecto EPSG:3857</li> </ul>"},{"location":"openLayers/#controles","title":"Controles","text":"<p>Los controles son los objetos que proporcionan informaci\u00f3n del mapa y posibilitan interaccionar con el propio mapa y las capas. Todos los controles se derivan de la clase ol.Control como por ejemplo: ol.Control.Zoom, ol.Control.Rotate.</p> <p>Por defecto el mapa tiene los siguientes controles </p> <ul> <li>ol/control/Zoom: botones para aumentar y disminuir el zoom</li> <li>ol/control/Rotate: permite rotar el mapa</li> <li>ol/control/Attribution: muestra la propiedad attribution de las capas</li> </ul> <p>Para a\u00f1adir controles al mapa se utilizan sus m\u00e9todos addControl</p> <p>Algunos de los principales controles son:</p> <ul> <li>ol.FullScreen: Barra de niveles de escala</li> <li>ol.MousePosition: Coordenadas del puntero.</li> <li>ol.OverviewMap: Mapa gu\u00eda</li> <li>ol.ScaleLine: Escala del mapa</li> <li>ol.ZoomSlider: Zoom mediante barra</li> <li>ol.ZoomToExtent: Zoom a una extensi\u00f3n</li> </ul>"},{"location":"openLayers/#diferentes-tipos-de-capas-y-sus-origenes","title":"Diferentes tipos de capas y sus origenes","text":"<p>Para obtener datos remotos para una capa, OpenLayers usa subclases ol/source/Source que especifica el origen de la informaci\u00f3n de la capa. OpenLayers tiene disponibles sources para servicios de mosaicos de mapas gratuitos y comerciales como OpenStreetMap o Bing, para fuentes OGC como WMS o WMTS, y para datos vectoriales en formatos como GeoJSON o KML. </p> <p>Las capas son los objetos que permiten a\u00f1adir informaci\u00f3n geogr\u00e1fica al mapa, es una representaci\u00f3n visual de datos de una fuente source. Todos las capas se derivan de la clase ol.Layer como por ejemplo: ol.Layer.Tile, ol.Layer.Vector, ol.Layer.VectorTile.</p> <p>Para a\u00f1adir capas al mapa se utilizan sus m\u00e9todos addLayer</p> <p>OpenLayers clasifica las capas seg\u00fan: </p> <ul> <li>Capas base y de superposici\u00f3n: S\u00f3lo hay una capa base visible en cada momento, mientras que de superposici\u00f3n puede haber todas las necesarias.</li> </ul> <p>OpenLayers tiene cuatro tipos b\u00e1sicos de capas:</p> <ul> <li>ol/layer/Tile: renderiza fuentes que proporcionan im\u00e1genes en mosaico en cuadr\u00edculas que est\u00e1n organizadas por niveles de zoom para resoluciones espec\u00edficas.</li> <li>ol/layer/Image: renderiza fuentes que proporcionan im\u00e1genes de mapas en extensiones y resoluciones arbitrarias.</li> <li>ol/layer/Vector: renderiza datos vectoriales del lado del cliente.</li> <li>ol/layer/VectorTile: renderiza los datos que se proporcionan como mosaicos vectoriales.</li> </ul> <p>En las capas vectoriales la fuente de informaci\u00f3n no es una imagen (mapa renderizado) sino elementos geogr\u00e1ficos (geometr\u00edas de tipo punto, l\u00ednea o pol\u00edgono) y es el navegador quien se encarga de dibujarlas utilizando las capacidades de dibujo vectorial (SVG, VML y canvas). En ella se gestiona una lista de features (ol.Feature) que se componen de:</p> <ul> <li>Geometr\u00eda (ol.geom.Geometry)</li> <li>id: identificador</li> <li>Estilo de simbolizaci\u00f3n (ol.style.Style)</li> </ul> <p>Uno de los puntos fuertes de OpenLayers es que puede trabajar con muchos tipos de capas y formatos vectoriales:</p> <ul> <li>Servicios OGC WMS, WFS, WCS y WMTS</li> <li>Cach\u00e9s: WMTS, TileCache, XYZ (tipo Google) y ArcGIS Server</li> <li>Formatos vectoriales: GML, KML, GeoJSON, WKT, GPX, GeoRSS, Atom...</li> </ul>"},{"location":"openLayers/#wms","title":"WMS","text":"<p>Podemos hacer peticiones a servicios WMS como una imagen simple usando ImageLayer como haciendo peticiones teseladas usando TileLayer</p> <p>Ejemplo WMS teselado</p> <pre><code>const inundacion500Teselada = new ol.layer.Tile({\n    source: new ol.source.TileWMS({\n        url:'https://servicios.idee.es/wms-inspire/riesgos-naturales/inundaciones?',\n        params: {'LAYERS': 'NZ.Flood.FluvialT500','FORMAT': 'image/png','TRANSPARENT': 'true'}\n    })\n});\n\nmap.addLayer(inundacion500Teselada);\n</code></pre> <p>Ejemplo WMS imagen simple</p> <pre><code>const inundacion500Simple = new ol.layer.Image({\n    source: new ol.source.ImageWMS({\n        url:'https://servicios.idee.es/wms-inspire/riesgos-naturales/inundaciones?',\n        params: {'LAYERS': 'NZ.Flood.FluvialT500','FORMAT': 'image/png','TRANSPARENT': 'true'}\n    })\n});\n\nmap.addLayer(inundacion500Simple);\n</code></pre>"},{"location":"openLayers/#geojson","title":"GeoJSON","text":"<p>Los tres ingredientes importantes para trabajar con datos vectoriales:</p> <ul> <li>Un formato para leer y escribir datos serializados (GeoJSON en este caso ol.format.GeoJSON)</li> <li>Una fuente de vector para obtener los datos y administrar un \u00edndice espacial de caracter\u00edsticas. (ol.source.Vector)</li> <li>Una capa vectorial para representar las entidades en el mapa (ol.layer.Vector)</li> </ul> <p>Ejemplo de cargar de GeoJSON desde una URL.</p> <pre><code>const vectorSource = new ol.source.Vector({\n    url: \"https://raw.githubusercontent.com/geostarters/dades/master/fulls50M.geojson\",\n    format: new ol.format.GeoJSON()\n});\n\nconst vectorLayer = new ol.layer.Vector({\n    source: vectorSource,\n    style: new ol.style.Style({\n        stroke: new ol.style.Stroke({\n        color: 'blue',\n        lineDash: [4],\n        width: 3,\n        }),\n        fill: new ol.style.Fill({\n        color: 'rgba(0, 0, 255, 0.1)',\n        }),\n    }),\n});\n\nmap.addLayer(vectorLayer);\n</code></pre>"},{"location":"openLayers/#proyecciones","title":"Proyecciones","text":"<p>OpenLayers permite hacer reproyecciones tanto de capas vectoriales como de capas r\u00e1ster en el navegador. Esto es una gran ventaja ya que la tranformaci\u00f3n de capas r\u00e1ster en el cliente (navegador) permite consumir servicios en SRS que inicialmente no est\u00e1n soportados por el proveedor del servicio. Se puede decir que esta capacidad es un punto fuerte que lo diferencia de otras librer\u00edas de mapas.</p> <p>La tranformaci\u00f3n de las capas vectoriales ya es m\u00e1s com\u00fan en otras librer\u00edas y permite consumir datos vectoriales que estan en un SRS diferente al definido en nuestro mapa.</p> <p>Para hacer la reproyecciones OpenLayers usa la librer\u00eda de Proj4.</p>"},{"location":"openLayers/#reproyeccion-raster","title":"Reproyecci\u00f3n Raster","text":"<p>OpenLayers tiene la capacidad de mostrar datos r\u00e1ster de WMS, WMTS, im\u00e1genes est\u00e1ticas y muchas otras fuentes en un sistema de coordenadas diferente al que se entrega desde el servidor. La transformaci\u00f3n de las proyecciones cartogr\u00e1ficas de la imagen se realiza directamente en un navegador web. La vista en cualquier sistema de referencia de coordenadas compatible con Proj4js es posible y ahora se pueden combinar y superponer capas previamente incompatibles. </p> <p>Ejemplo: https://openlayers.org/en/latest/doc/tutorials/raster-reprojection.html</p>"},{"location":"openLayers/#reproyeccion-vector","title":"Reproyeccion Vector","text":"<p>Ejemplo: http://dev.openlayers.org/examples/using-proj4js.html</p>"},{"location":"openLayers/#ejemplos","title":"Ejemplos","text":"<p>Pod\u00e9is ver m\u00e1s ejemplos de c\u00f3digo en https://openlayers.org/en/latest/examples/</p> <p>Tambi\u00e9n pod\u00e9is ver un worlshop con ejemplos en https://openlayers.org/workshop/en/</p> <p>Ejercicio 1 pts</p> <ol> <li>Preparar un mapa con la capa de OpenStreetMap centrada en Catalunya.</li> <li>Agregar al mapa el servicio WMS del ICGC de la ortofoto 25c.</li> <li>A\u00f1adir el control fullscreen</li> <li>A\u00f1adir los municipios de Catalunya en formato geojson. (https://raw.githubusercontent.com/geostarters/dades/master/Municipis_Catalunya_EPSG4326.geojson) (0.5 pt)</li> </ol> <p>Realizar los 3 primeros puntos anterios son (0.5 pt) en el caso contrario 0 pt.</p> <p>El punto 4 son (0.5 pt)</p>"},{"location":"openLayers/#referencias","title":"Referencias","text":"<ol> <li> <p>https://openlayers.org/ \u21a9</p> </li> <li> <p>https://openlayers.org/en/latest/apidoc/ \u21a9</p> </li> </ol>"},{"location":"turf/","title":"Turf.js","text":"<p>An\u00e1lisis geoespacial avanzado para navegadores y Node.js </p> <p>https://turfjs.org/</p> <p>Ejemplo</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" /&gt;\n\n    &lt;script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet-hash/0.2.1/leaflet-hash.min.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://unpkg.com/@turf/turf@6/turf.min.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n\n    &lt;style&gt;\n        body {\n            margin: 0;\n            padding: 0;\n        }\n        #map {\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            width: 100%;\n        }\n        #features {\n            position: absolute;\n            top: 0;\n            right: 0;\n            bottom: 0;\n            width: 350px;\n            overflow: auto;\n            background: rgba(255, 255, 255, 0.8);\n            z-index: 10000;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"features\"&gt;\n        &lt;div&gt;\n            &lt;select name=\"\" id=\"objetivos\"&gt;\n\n            &lt;/select&gt;\n        &lt;/div&gt;\n        &lt;div id=\"alumnos\"&gt;\n\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;button id=\"resultados\"&gt;Resultados&lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;div id='map'&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        const map = L.map('map').setView([37.88437176085360, -4.779524803161621], 14);\n\n        const objetivos = [\n          {\n            name: \"Pedraforca\",\n            pos: \"42.23993;1.70375\",\n            view: \"9/41.7355/2.3703\"\n          },\n          {\n            name: \"Zaragoza\",\n            pos: \"41.6570;-0.8621\",\n            view: \"8/41.098/-0.176\"\n          },\n          {\n            name: \"C\u00f3rdoba\",\n            pos: \"37.8842;-4.7639\",\n            view: \"7/39.880/-0.956\"\n          },\n          {\n            name: \"Giza Necropolis\",\n            pos: \"29.97684;31.13684\",\n            view: \"9/30.1938/31.6187\"\n          },\n          {\n            name: \"Great Wall of China\",\n            pos: \"40.4316544;116.56464\",\n            view: \"5/31.747/114.082\"\n          },\n          {\n            name: \"Mt Everest\",\n            pos: \"28.014503;86.90959\",\n            view: \"6/31.812/92.340\"\n          },\n\n        ]\n\n        document.getElementById('objetivos').innerHTML = [`&lt;option value=\"-----\"&gt;Seleccionar objetivo&lt;/option&gt;`, ...objetivos.map((item) =&gt; {\n            return `&lt;option value=\"${item.pos}@${item.view}\"&gt;${item.name}&lt;/option&gt;`;\n        })].join(\"\");\n\n        const hash = new L.Hash(map);\n\n        // Capas base\n        const osmLayer = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\n            attribution: '&amp;copy; &lt;a href=\"http://osm.org/copyright\"&gt;OpenStreetMap&lt;\\/a&gt; contributors'\n        }).addTo(map);\n\n        const satelite = L.tileLayer('https://api.maptiler.com/tiles/satellite-v2/{z}/{x}/{y}.jpg?key=YOUR_MAPTILER_API_KEY',{\n          tileSize: 512,\n          zoomOffset: -1,\n          minZoom: 1,\n          attribution: \"\\u003ca href=\\\"https://www.maptiler.com/copyright/\\\" target=\\\"_blank\\\"\\u003e\\u0026copy; MapTiler\\u003c/a\\u003e \\u003ca href=\\\"https://www.openstreetmap.org/copyright\\\" target=\\\"_blank\\\"\\u003e\\u0026copy; OpenStreetMap contributors\\u003c/a\\u003e\",\n          crossOrigin: true\n        }).addTo(map);\n\n        function getColor(d) {\n          return d &gt; 15  ? '#cf597e' :\n           d &gt; 10  ? '#e88471' :\n           d &gt; 5  ? '#eeb479' :\n           d &gt; 3   ? '#e9e29c' :\n           d &gt; 2   ? '#9ccb86' :\n           d &gt; 1   ? '#39b185' :\n                      '#009392';\n        }\n\n        const gridLayer = L.geoJSON(null, {\n          style: function(feature){\n            return {\n              fillColor: getColor(feature.properties.count),\n              weight: 2,\n              opacity: 1,\n              color: 'white',\n              dashArray: '3',\n              fillOpacity: feature.properties.count ? 0.7 : 0\n            };\n          }\n        }).addTo(map);\n\n        document.getElementById('objetivos').addEventListener(\"change\", () =&gt; {\n          if (document.getElementById(\"objetivos\").value !== \"-----\") {\n            const view = document.getElementById(\"objetivos\").value.split(\"@\")[1].split(\"/\");\n            map.setView([view[1], view[2]], view[0]);\n            gridLayer.clearLayers();\n            respMarkers.forEach(item =&gt; {\n              item.remove();\n            });\n            est.forEach((item) =&gt; {\n              if (item.latlng) item.latlng = null;\n            });\n          }\n        });\n\n        L.control.layers({\n          osm: osmLayer,\n          sat: satelite\n        }, {}, {position: 'topleft'}).addTo(map);\n\n        const est = [\n          {\n            id: \"1\",\n            nom: \"Puig Mora, Antoni\",\n            icon: \"abduction\",\n            score: 0\n          },\n          {\n            id: \"2\",\n            nom: \"Zaldua Antolinez, Carlos Eduardo\",\n            icon: \"alien\",\n            score: 0\n          },\n          {\n            id: \"3\",\n            nom: \"Dur\u00e0 Lahoz, Cristina\",\n            icon: \"anon\",\n            score: 0\n          },\n          {\n            id: \"4\",\n            nom: \"Garc\u00eda Z\u00e1rate, Diego\",\n            icon: \"avalanche1\",\n            score: 0\n          },\n          {\n            id: \"5\",\n            nom: \"Rosell\u00f3 Boada, Eva\",\n            icon: \"battlefield\",\n            score: 0\n          },\n          {\n            id: \"6\",\n            nom: \"Bueno Tricas, Gerard\",\n            icon: \"blast\",\n            score: 0\n          },\n          {\n            id: \"7\",\n            nom: \"Col\u00e0s Bajo, Marta\",\n            icon: \"bomb\",\n            score: 0\n          },\n          {\n            id: \"8\",\n            nom: \"Morales Rodriguez, Nicole\",\n            icon: \"caraccident\",\n            score: 0\n          },\n          {\n            id: \"9\",\n            nom: \"Timoner Alfageme, Paula\",\n            icon: \"cowabduction\",\n            score: 0\n          },\n          {\n            id: \"10\",\n            nom: \"Enguialle, Pierre\",\n            icon: \"crimescene\",\n            score: 0\n          },\n          {\n            id: \"11\",\n            nom: \"Rub\u00ed Perales, Pol\",\n            icon: \"earthquake-3\",\n            score: 0\n          },\n          {\n            id: \"12\",\n            nom: \"Garc\u00eda G\u00f3mez, Rodrigo\",\n            icon: \"fire\",\n            score: 0\n          },\n          {\n            id: \"13\",\n            nom: \"Vintimilla Cruz, Tito Santiago\",\n            icon: \"flood\",\n            score: 0\n          },\n          {\n            id: \"14\",\n            nom: \"Miguel Novillo Fernandez\",\n            icon: \"love_date\",\n            score: 0\n          },\n          {\n            id: \"15\",\n            nom: \"Wang, Wenyu\",\n            icon: \"peace\",\n            score: 0\n          },\n          {\n            id: \"16\",\n            nom: \"Lyu, Xinyu\",\n            icon: \"phantom\",\n            score: 0\n          }/*,\n          {\n            id: \"17\",\n            nom: \"\",\n            icon: \"pirates\",\n            score: 0\n          },\n          {\n            id: \"18\",\n            nom: \"\",\n            icon: \"planecrash\",\n            score: 0\n          },\n          {\n            id: \"19\",\n            nom: \"\",\n            icon: \"radiation\",\n            score: 0\n          }*/\n        ];\n\n        const iconBaseUrl = \"http://betaserver.icgc.cat/mapicons/\";\n\n        function createTable() {\n          document.getElementById(\"alumnos\").innerHTML = est.map(item =&gt; {\n            return `&lt;div&gt;\n              &lt;input type=\"radio\" name=\"estudiante\" value=\"${item.id}\"&gt;\n              &lt;span&gt;&lt;img src=\"${iconBaseUrl}${item.icon}.png\" alt=\"\"&gt;&lt;/span&gt; ${item.nom}: \n              &lt;span&gt;${item.distance ? `${item.distance.toFixed(4).replace('.', ',')} Km` : item.score}&lt;/span&gt;\n            &lt;/div&gt;`;\n          }).join(\"\");\n        }\n\n        createTable();\n\n        map.on('click', function(evt){\n\n\n            const objetivo = document.getElementById(\"objetivos\").value.split(\"@\")[0].split(\";\");\n\n            const pt1 = turf.point([objetivo[1], objetivo[0]]);\n            const pt2 = turf.point([evt.latlng.lng, evt.latlng.lat]);\n            const options = {units: 'kilometers'};\n\n            const distance = turf.distance(pt1, pt2, options);\n\n            const activeEstId = document.querySelector('input[name=\"estudiante\"]:checked').value;\n\n            const activeEst = est.find((item) =&gt; {\n              return item.id === activeEstId;\n            });\n\n            activeEst.distance = distance;\n            activeEst.latlng = evt.latlng\n\n            const marker = L.marker(activeEst.latlng, {icon: crearIcono(activeEst.icon)}).addTo(map);\n\n            setTimeout(() =&gt; {\n              marker.remove()\n            }, 1000);\n\n        });\n\n        function crearIcono(id){\n          return L.icon({\n              iconUrl: `${iconBaseUrl}${id}.png`,\n              iconSize: [37, 37],\n          });\n        }\n\n        const respMarkers = [];\n\n        function mostrarResultados() {\n            est.sort((a,b) =&gt; {\n              if (!a.distance) return 1;\n              if (!b.distance) return -1;\n              return a.distance - b.distance\n            });\n            createTable();\n\n            const respuestas = {\n              type: \"FeatureCollection\",\n              features: []\n            }\n\n            est.forEach((item) =&gt; {\n              if (item.latlng) {\n                const mark = L.marker(item.latlng, {icon: crearIcono(item.icon)}).addTo(map);\n                respuestas.features.push({\n                  type: \"Feature\",\n                  geometry: {\n                    \"type\": \"Point\",\n                    \"coordinates\": [item.latlng.lng, item.latlng.lat]\n                  }\n                });\n                respMarkers.push(mark);\n              }\n            });\n\n            const objetivo = document.getElementById(\"objetivos\").value.split(\"@\")[0].split(\";\");\n            map.setView(objetivo, 15);\n            const mark = L.marker(objetivo).addTo(map);\n            respMarkers.push(mark);\n\n            const bboxpol = turf.bboxPolygon(turf.bbox(respuestas))\n            const respArea = turf.transformScale(bboxpol, 2);\n            const bbox = turf.bbox(respArea);\n            const hexgrid = turf.hexGrid(bbox, 5);\n\n            turf.featureEach(hexgrid, function (currentFeature, featureIndex) {\n              const ptsWithin = turf.pointsWithinPolygon(respuestas, currentFeature);\n              currentFeature.properties.count = ptsWithin.features.length;\n            });\n\n            gridLayer.addData(hexgrid);\n        }\n\n        document.getElementById('resultados').addEventListener('click', mostrarResultados);\n\n    &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"}]}